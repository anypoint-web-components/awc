{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-autocomplete.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-button.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-checkbox.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-chip-input.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-chip.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-combobox.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-dialog.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-dropdown-menu.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-dropdown.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-input-combobox.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-input.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-item.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-listbox.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-menu-button.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-progress.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-radio-button.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-selector.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-switch.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/anypoint-tabs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/bottom-sheet.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/cats-only.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CatsOnly",
          "members": [
            {
              "kind": "method",
              "name": "validateObject",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "obj",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateArray",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "mixins": [
            {
              "name": "ValidatorMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cats-only",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "cats-only",
          "declaration": {
            "name": "CatsOnly",
            "module": "demo/cats-only.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/cats-only2.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CatsOnly",
          "members": [
            {
              "kind": "method",
              "name": "validateObject",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "obj",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateArray",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "mixins": [
            {
              "name": "ValidatorMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cats-only",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "cats-only2",
          "declaration": {
            "name": "CatsOnly",
            "module": "demo/cats-only2.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/collapse-custom-detail.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CustomDetail",
          "members": [
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "horizontal"
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noAnimation",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "noAnimation"
            },
            {
              "kind": "field",
              "name": "buttonLabel",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "horizontal"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "opened"
            },
            {
              "name": "noAnimation",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "noAnimation"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "custom-detail",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CustomDetail",
          "declaration": {
            "name": "CustomDetail",
            "module": "demo/collapse-custom-detail.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "custom-detail",
          "declaration": {
            "name": "CustomDetail",
            "module": "demo/collapse-custom-detail.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/color-selector.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/fit-mixin.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/hoverable-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HoverableElement",
          "members": [],
          "mixins": [
            {
              "name": "HoverableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hoverable-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "hoverable-element",
          "declaration": {
            "name": "HoverableElement",
            "module": "demo/hoverable-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/maps-icons.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "directionsBike"
        },
        {
          "kind": "variable",
          "name": "directionsBoat"
        },
        {
          "kind": "variable",
          "name": "directionsBus"
        },
        {
          "kind": "variable",
          "name": "directionsCar"
        },
        {
          "kind": "variable",
          "name": "directionsRailway"
        },
        {
          "kind": "variable",
          "name": "directionsRun"
        },
        {
          "kind": "variable",
          "name": "directionsWalk"
        },
        {
          "kind": "variable",
          "name": "localLibrary"
        },
        {
          "kind": "variable",
          "name": "localGroceryStore"
        },
        {
          "kind": "variable",
          "name": "localMovies"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "directionsBike",
          "declaration": {
            "name": "directionsBike",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "directionsBoat",
          "declaration": {
            "name": "directionsBoat",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "directionsBus",
          "declaration": {
            "name": "directionsBus",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "directionsCar",
          "declaration": {
            "name": "directionsCar",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "directionsRailway",
          "declaration": {
            "name": "directionsRailway",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "directionsRun",
          "declaration": {
            "name": "directionsRun",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "directionsWalk",
          "declaration": {
            "name": "directionsWalk",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "localLibrary",
          "declaration": {
            "name": "localLibrary",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "localGroceryStore",
          "declaration": {
            "name": "localGroceryStore",
            "module": "demo/maps-icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "localMovies",
          "declaration": {
            "name": "localMovies",
            "module": "demo/maps-icons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/material-ripple.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/menu-mixin.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/minimum-length.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MinimumLength",
          "members": [
            {
              "kind": "method",
              "name": "validateObject",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "obj",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validateArray",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "message"
            }
          ],
          "mixins": [
            {
              "name": "ValidatorMixin",
              "module": "/src/mixins/ValidatorMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "minimum-length",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "minimum-length",
          "declaration": {
            "name": "MinimumLength",
            "module": "demo/minimum-length.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/minimum-maximum-length.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MinimumMaximumLength",
          "members": [
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "'Value too short or too long'",
              "attribute": "message"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "4",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "12",
              "attribute": "max"
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "'Value too short or too long'",
              "fieldName": "message"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "4",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "12",
              "fieldName": "max"
            }
          ],
          "mixins": [
            {
              "name": "ValidatorMixin",
              "module": "/src/mixins/ValidatorMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "minimum-maximum-length",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MinimumMaximumLength",
          "declaration": {
            "name": "MinimumMaximumLength",
            "module": "demo/minimum-maximum-length.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "minimum-maximum-length",
          "declaration": {
            "name": "MinimumMaximumLength",
            "module": "demo/minimum-maximum-length.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/number-required.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NumberRequired",
          "members": [
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "'Must have number'",
              "attribute": "message"
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "'Must have number'",
              "fieldName": "message"
            }
          ],
          "mixins": [
            {
              "name": "ValidatorMixin",
              "module": "/src/mixins/ValidatorMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "number-required",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NumberRequired",
          "declaration": {
            "name": "NumberRequired",
            "module": "demo/number-required.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "number-required",
          "declaration": {
            "name": "NumberRequired",
            "module": "demo/number-required.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/range-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RangeElement",
          "members": [],
          "mixins": [
            {
              "name": "RangeMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "range-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RangeElement",
          "declaration": {
            "name": "RangeElement",
            "module": "demo/range-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "range-element",
          "declaration": {
            "name": "RangeElement",
            "module": "demo/range-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/range-mixin.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/sample-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SampleContent",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "padding",
              "type": {
                "text": "string"
              },
              "default": "'16px'",
              "attribute": "padding"
            },
            {
              "kind": "field",
              "name": "margin",
              "type": {
                "text": "string"
              },
              "default": "'24px'",
              "attribute": "margin"
            },
            {
              "kind": "field",
              "name": "boxShadow",
              "type": {
                "text": "string"
              },
              "default": "'0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2)'",
              "attribute": "boxShadow"
            },
            {
              "kind": "method",
              "name": "_randomString",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "default": "1"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_randomLetter",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "size"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "padding",
              "type": {
                "text": "string"
              },
              "default": "'16px'",
              "fieldName": "padding"
            },
            {
              "name": "margin",
              "type": {
                "text": "string"
              },
              "default": "'24px'",
              "fieldName": "margin"
            },
            {
              "name": "boxShadow",
              "type": {
                "text": "string"
              },
              "default": "'0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2)'",
              "fieldName": "boxShadow"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sample-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SampleContent",
          "declaration": {
            "name": "SampleContent",
            "module": "demo/sample-content.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sample-content",
          "declaration": {
            "name": "SampleContent",
            "module": "demo/sample-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/scroll-threshold.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IndexDemo",
          "members": [
            {
              "kind": "field",
              "name": "upperTriggered",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "lowerTriggered",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "500",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "loadMoreData",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_lowerChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_upperChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "500",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "index-demo",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IndexDemo",
          "declaration": {
            "name": "IndexDemo",
            "module": "demo/scroll-threshold.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "index-demo",
          "declaration": {
            "name": "IndexDemo",
            "module": "demo/scroll-threshold.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/scrollable-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XScrollableElement",
          "members": [
            {
              "kind": "field",
              "name": "itemCount",
              "type": {
                "text": "number"
              },
              "default": "200",
              "attribute": "itemCount"
            },
            {
              "kind": "field",
              "name": "xScrollLeft",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "xScrollLeft"
            },
            {
              "kind": "field",
              "name": "xScrollTop",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "xScrollTop"
            },
            {
              "kind": "method",
              "name": "_scrollHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getItems",
              "return": {
                "type": {
                  "text": "boolean[]"
                }
              },
              "parameters": [
                {
                  "name": "itemCount",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "itemCount",
              "type": {
                "text": "number"
              },
              "default": "200",
              "fieldName": "itemCount"
            },
            {
              "name": "xScrollLeft",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "xScrollLeft"
            },
            {
              "name": "xScrollTop",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "xScrollTop"
            }
          ],
          "mixins": [
            {
              "name": "ScrollTargetMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "scrollable-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "XScrollableElement",
          "declaration": {
            "name": "XScrollableElement",
            "module": "demo/scrollable-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "scrollable-element",
          "declaration": {
            "name": "XScrollableElement",
            "module": "demo/scrollable-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/scrolling-region-decoupled-demo.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ScrollingRegionDecoupledDemo",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "500",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "loadMoreData",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "500",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "scrolling-region-decoupled-demo",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollingRegionDecoupledDemo",
          "declaration": {
            "name": "ScrollingRegionDecoupledDemo",
            "module": "demo/scrolling-region-decoupled-demo.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "scrolling-region-decoupled-demo",
          "declaration": {
            "name": "ScrollingRegionDecoupledDemo",
            "module": "demo/scrolling-region-decoupled-demo.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/scrolling-region-demo.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ScrollingRegionDemo",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "500",
              "attribute": "size"
            },
            {
              "kind": "method",
              "name": "loadMoreData",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "500",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "scrolling-region-demo",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollingRegionDemo",
          "declaration": {
            "name": "ScrollingRegionDemo",
            "module": "demo/scrolling-region-demo.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "scrolling-region-demo",
          "declaration": {
            "name": "ScrollingRegionDemo",
            "module": "demo/scrolling-region-demo.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/simple-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleButton",
          "members": [],
          "mixins": [
            {
              "name": "ControlStateMixin",
              "module": "/src/index.js"
            },
            {
              "name": "ButtonStateMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-button",
          "declaration": {
            "name": "SimpleButton",
            "module": "demo/simple-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/simple-checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleCheckbox",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "default": "'Not validated'",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "_onCheckClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onClick",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "default": "'Not validated'",
              "fieldName": "label"
            }
          ],
          "mixins": [
            {
              "name": "CheckedElementMixin",
              "module": "/src/mixins/CheckedElementMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-checkbox",
          "declaration": {
            "name": "SimpleCheckbox",
            "module": "demo/simple-checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/simple-dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleDropdown",
          "members": [
            {
              "kind": "field",
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign | undefined"
              },
              "default": "'top'",
              "attribute": "verticalAlign"
            },
            {
              "kind": "field",
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign | undefined"
              },
              "default": "'left'",
              "attribute": "horizontalAlign"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "scrollAction",
              "type": {
                "text": "string | undefined"
              },
              "default": "'refit'",
              "attribute": "scrollAction"
            },
            {
              "kind": "field",
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[]"
              },
              "default": "[\n    {\n      keyframes: [\n        { transform: 'scale(1, 0)' },\n        { transform: 'scale(1, 1)' }\n      ],\n      timing: { delay: 0, duration: 200, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    },\n    {\n      keyframes: [{ opacity: 0 }, { opacity: 1 }],\n      timing: { delay: 0, duration: 300, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    }\n  ]",
              "attribute": "openAnimationConfig"
            },
            {
              "kind": "field",
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[]"
              },
              "default": "[\n    {\n      keyframes: [\n        { transform: 'scale(1, 1)' },\n        { transform: 'scale(1, 0)' }\n      ],\n      timing: { delay: 0, duration: 200, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    },\n    {\n      keyframes: [{ opacity: 1 }, { opacity: 0 }],\n      timing: { delay: 0, duration: 300, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    }\n  ]",
              "attribute": "closeAnimationConfig"
            },
            {
              "kind": "field",
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "noAnimations"
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign | undefined"
              },
              "default": "'top'",
              "fieldName": "verticalAlign"
            },
            {
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign | undefined"
              },
              "default": "'left'",
              "fieldName": "horizontalAlign"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "scrollAction",
              "type": {
                "text": "string | undefined"
              },
              "default": "'refit'",
              "fieldName": "scrollAction"
            },
            {
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[]"
              },
              "default": "[\n    {\n      keyframes: [\n        { transform: 'scale(1, 0)' },\n        { transform: 'scale(1, 1)' }\n      ],\n      timing: { delay: 0, duration: 200, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    },\n    {\n      keyframes: [{ opacity: 0 }, { opacity: 1 }],\n      timing: { delay: 0, duration: 300, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    }\n  ]",
              "fieldName": "openAnimationConfig"
            },
            {
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[]"
              },
              "default": "[\n    {\n      keyframes: [\n        { transform: 'scale(1, 1)' },\n        { transform: 'scale(1, 0)' }\n      ],\n      timing: { delay: 0, duration: 200, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    },\n    {\n      keyframes: [{ opacity: 1 }, { opacity: 0 }],\n      timing: { delay: 0, duration: 300, easing: 'cubic-bezier(0.4, 0, 0.2, 1)', fill: 'both' }\n    }\n  ]",
              "fieldName": "closeAnimationConfig"
            },
            {
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "noAnimations"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SimpleDropdown",
          "declaration": {
            "name": "SimpleDropdown",
            "module": "demo/simple-dropdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "simple-dropdown",
          "declaration": {
            "name": "SimpleDropdown",
            "module": "demo/simple-dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/simple-fit.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleFit",
          "members": [
            {
              "kind": "field",
              "name": "myProp",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "my-prop"
            }
          ],
          "attributes": [
            {
              "name": "my-prop",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "myProp"
            }
          ],
          "mixins": [
            {
              "name": "FitMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-fit",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SimpleFit",
          "declaration": {
            "name": "SimpleFit",
            "module": "demo/simple-fit.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "simple-fit",
          "declaration": {
            "name": "SimpleFit",
            "module": "demo/simple-fit.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/simple-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleMenu",
          "members": [],
          "mixins": [
            {
              "name": "MenuMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SimpleMenu",
          "declaration": {
            "name": "SimpleMenu",
            "module": "demo/simple-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "simple-menu",
          "declaration": {
            "name": "SimpleMenu",
            "module": "demo/simple-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/simple-menubar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleMenubar",
          "members": [],
          "mixins": [
            {
              "name": "MenubarMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-menubar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-menubar",
          "declaration": {
            "name": "SimpleMenubar",
            "module": "demo/simple-menubar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/simple-overlay.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleOverlay",
          "members": [],
          "mixins": [
            {
              "name": "OverlayMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-overlay",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "simple-overlay",
          "declaration": {
            "name": "SimpleOverlay",
            "module": "demo/simple-overlay.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/star-rating.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/uppercase-required.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UppercaseRequired",
          "members": [
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "'Must have uppercase letter'",
              "attribute": "message"
            },
            {
              "kind": "method",
              "name": "validate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "'Must have uppercase letter'",
              "fieldName": "message"
            }
          ],
          "mixins": [
            {
              "name": "ValidatorMixin",
              "module": "/src/mixins/ValidatorMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "uppercase-required",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UppercaseRequired",
          "declaration": {
            "name": "UppercaseRequired",
            "module": "demo/uppercase-required.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "uppercase-required",
          "declaration": {
            "name": "UppercaseRequired",
            "module": "demo/uppercase-required.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/validatable-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ValidatableInput",
          "members": [
            {
              "kind": "method",
              "name": "_onInput",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "mixins": [
            {
              "name": "ValidatableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "validatable-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "validatable-input",
          "declaration": {
            "name": "ValidatableInput",
            "module": "demo/validatable-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/validator-mixin.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/x-app.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XApp",
          "members": [],
          "mixins": [
            {
              "name": "ResizableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-app",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "x-app",
          "declaration": {
            "name": "XApp",
            "module": "demo/x-app.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/x-puck.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XPuck",
          "members": [
            {
              "kind": "field",
              "name": "parent",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "x",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "x"
            },
            {
              "kind": "field",
              "name": "y",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "y"
            },
            {
              "kind": "method",
              "name": "_onIronResize",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "x",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "x"
            },
            {
              "name": "y",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "y"
            }
          ],
          "mixins": [
            {
              "name": "ResizableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-puck",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "x-puck",
          "declaration": {
            "name": "XPuck",
            "module": "demo/x-puck.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "scripts/prePublish.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/colors.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/default-theme.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/din-pro.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AnypointAutocompleteElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointAutocompleteElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointButtonBase",
          "declaration": {
            "name": "AnypointButtonBase",
            "module": "\"./elements/AnypointButtonBase.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointButtonElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointButtonElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointCheckboxElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointCheckboxElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointChipElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointChipElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointChipInputElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointChipInputElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointCollapseElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointCollapseElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointComboboxElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointComboboxElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointDialogElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointDialogElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointDialogScrollableElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointDialogScrollableElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointDropdownElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointDropdownElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointDropdownMenuElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointDropdownMenuElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointIconButtonElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointIconButtonElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointIconItemElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointIconItemElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointInputComboboxElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointInputComboboxElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointInputElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointInputElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointItemBodyElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointItemBodyElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointItemElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointItemElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointListboxElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointListboxElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointMaskedInputElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/AnypointMaskedInput.js\""
          }
        },
        {
          "kind": "js",
          "name": "AnypointMenuButtonElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointMenuButtonElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointProgressElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointProgressElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointRadioButtonElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointRadioButtonElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointRadioGroupElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointRadioGroupElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointSelectorElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointSelectorElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointSwitchElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointSwitchElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointTabElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointTabElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointTabsElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointTabsElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointTextareaElement",
          "declaration": {
            "name": "default",
            "module": "./elements/AnypointTextareaElement.js"
          }
        },
        {
          "kind": "js",
          "name": "BottomSheetElement",
          "declaration": {
            "name": "default",
            "module": "./elements/BottomSheetElement.js"
          }
        },
        {
          "kind": "js",
          "name": "ColorInputSelectorElement",
          "declaration": {
            "name": "default",
            "module": "./elements/ColorInputSelectorElement.js"
          }
        },
        {
          "kind": "js",
          "name": "ColorSelectorElement",
          "declaration": {
            "name": "default",
            "module": "./elements/ColorSelectorElement.js"
          }
        },
        {
          "kind": "js",
          "name": "DateTimeElement",
          "declaration": {
            "name": "default",
            "module": "./elements/DateTimeElement.js"
          }
        },
        {
          "kind": "js",
          "name": "MaterialRippleElement",
          "declaration": {
            "name": "default",
            "module": "\"./elements/MaterialRippleElement.js\""
          }
        },
        {
          "kind": "js",
          "name": "ScrollThresholdElement",
          "declaration": {
            "name": "default",
            "module": "./elements/ScrollThresholdElement.js"
          }
        },
        {
          "kind": "js",
          "name": "StarRatingElement",
          "declaration": {
            "name": "default",
            "module": "./elements/StarRatingElement.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointDialogStyles",
          "declaration": {
            "name": "default",
            "module": "./styles/AnypointDialogStyles.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointDialogStylesInternal",
          "declaration": {
            "name": "default",
            "module": "./styles/AnypointDialogInternalStyles.js"
          }
        },
        {
          "kind": "js",
          "name": "ButtonStateMixin",
          "declaration": {
            "name": "ButtonStateMixin",
            "module": "\"./mixins/ButtonStateMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "ControlStateMixin",
          "declaration": {
            "name": "ControlStateMixin",
            "module": "\"./mixins/ControlStateMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "HoverableMixin",
          "declaration": {
            "name": "HoverableMixin",
            "module": "\"./mixins/HoverableMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "CheckedElementMixin",
          "declaration": {
            "name": "CheckedElementMixin",
            "module": "\"./mixins/CheckedElementMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "ValidatorMixin",
          "declaration": {
            "name": "ValidatorMixin",
            "module": "\"./mixins/ValidatorMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "\"./mixins/ValidatorStore.js\""
          }
        },
        {
          "kind": "js",
          "name": "ValidatableMixin",
          "declaration": {
            "name": "ValidatableMixin",
            "module": "\"./mixins/ValidatableMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "SelectableMixin",
          "declaration": {
            "name": "SelectableMixin",
            "module": "./mixins/SelectableMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "MultiSelectableMixin",
          "declaration": {
            "name": "MultiSelectableMixin",
            "module": "./mixins/MultiSelectableMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "AnypointSelection",
          "declaration": {
            "name": "AnypointSelection",
            "module": "./mixins/AnypointSelection.js"
          }
        },
        {
          "kind": "js",
          "name": "MenuMixin",
          "declaration": {
            "name": "MenuMixin",
            "module": "./mixins/MenuMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "MenubarMixin",
          "declaration": {
            "name": "MenubarMixin",
            "module": "./mixins/MenubarMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "ResizableMixin",
          "declaration": {
            "name": "ResizableMixin",
            "module": "./mixins/ResizableMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "FitMixin",
          "declaration": {
            "name": "FitMixin",
            "module": "./mixins/FitMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "OverlayMixin",
          "declaration": {
            "name": "OverlayMixin",
            "module": "./mixins/OverlayMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "EventsTargetMixin",
          "declaration": {
            "name": "EventsTargetMixin",
            "module": "./mixins/EventsTargetMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "ScrollTargetMixin",
          "declaration": {
            "name": "ScrollTargetMixin",
            "module": "./mixins/ScrollTargetMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./lib/ScrollManager.js"
          }
        },
        {
          "kind": "js",
          "name": "RangeMixin",
          "declaration": {
            "name": "RangeMixin",
            "module": "./mixins/RangeMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ValidationResult",
          "declaration": {
            "name": "ValidationResult",
            "module": "\"./mixins/ValidatableMixin.js\""
          }
        },
        {
          "kind": "js",
          "name": "VerticalAlign",
          "declaration": {
            "name": "VerticalAlign",
            "module": "./mixins/FitMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "HorizontalAlign",
          "declaration": {
            "name": "HorizontalAlign",
            "module": "./mixins/FitMixin.js"
          }
        },
        {
          "kind": "js",
          "name": "IAnimationConfig",
          "declaration": {
            "name": "IAnimationConfig",
            "module": "./lib/Animations.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/typography.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "coverage/lcov-report/block-navigation.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "coverage/lcov-report/prettify.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "coverage/lcov-report/sorter.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/DemoHelperElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DemoHelperElement",
          "members": [
            {
              "kind": "field",
              "name": "_markdown",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "markdown",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_firstUpdated",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "ignoreSlotChange",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_registerSlotListener",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_slotChangeHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateContent",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unindent",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_highlight",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_copyToClipboard",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_resetCopyButtonState",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DemoHelperElement",
            "module": "demo/lib/DemoHelperElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/DemoHelperStyles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`\n:host {\n  display: block;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n              0 1px 5px 0 rgba(0, 0, 0, 0.12),\n              0 3px 1px -2px rgba(0, 0, 0, 0.2);\n  margin-bottom: 40px;\n}\n\n.demo {\n  display: block;\n  border-bottom: 1px solid #e0e0e0;\n  background-color: var(--demo-helper-demo-background-color, white);\n  margin: 0;\n  padding: 20px;\n}\n\n.code-container {\n  margin: 0;\n  background-color: var(--demo-helper-code-container-background-color, #f5f5f5);\n  font-size: 13px;\n  overflow: auto;\n  position: relative;\n  padding: 0 20px;\n}\n\n.code {\n  padding: 20px;\n  margin: 0;\n  background-color: var(--demo-helper-code-container-background-color, var(--google-grey-100));\n  font-size: 13px;\n  overflow: auto;\n\n  display: block;\n  white-space: pre-wrap;\n}\n\n.code > pre {\n  margin: 0;\n  padding: 0 0 10px 0;\n}\n\n#copyButton {\n  position: absolute;\n  top: 0;\n  right: 0px;\n  text-transform: uppercase;\n  border: none;\n  cursor: pointer;\n  background: #e0e0e0;\n}\n`"
        },
        {
          "kind": "variable",
          "name": "prismStyles",
          "default": "css`/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http://dabblet.com)\n * @author Lea Verou\n */\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n  white-space: pre-wrap;\n  word-spacing: normal;\n  word-break: break-all;\n  word-wrap: break-word;\n  line-height: 1.5;\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n  hyphens: auto;\n  background-color: var(--prism-container-background-color);\n  display: block;\n  font-family: var(--arc-font-code-family, monospace);\n  font-size: var(--arc-font-code-font-size, 10pt);\n}\npre[class*=\"language-\"]::-moz-selection,\npre[class*=\"language-\"]::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection {\n  text-shadow: none;\n  background: var(--prism-container-selection-background-color, #b3d4fc);\n}\npre[class*=\"language-\"]::selection,\npre[class*=\"language-\"]::selection,\ncode[class*=\"language-\"]::selection,\ncode[class*=\"language-\"]::selection {\n  text-shadow: none;\n  background: var(--prism-container-selection-background-color, #b3d4fc);\n}\n@media print {\n  code[class*=\"language-\"],\n  pre[class*=\"language-\"] {\n    text-shadow: none;\n  }\n}\n/* Code blocks */\npre[class*=\"language-\"] {\n  padding: 1em;\n  margin: .5em 0;\n  overflow: auto;\n}\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n  background: var(--prism-container-pre-background-color, #f5f2f0);\n}\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n  padding: .1em;\n  border-radius: .3em;\n  white-space: normal;\n}\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: var(--code-token-comment-value-color, slategray);\n}\n.token.punctuation {\n  color: var(--code-punctuation-value-color, #999);\n}\n.namespace {\n  opacity: .7;\n}\n.token.property,\n.token.tag,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: var(--code-property-value-color, #905);\n}\n.token.number {\n  color: var(--code-type-number-value-color, #905);\n}\n.token.boolean {\n  color: var(--code-type-boolean-value-color, #905);\n}\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: var(--code-type-text-value-color, #690);\n}\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  color: var(--code-operator-value-color, #a67f59);\n  background: var(--code-operator-value-background-color, hsla(0, 0%, 100%, .5));\n}\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: var(--code-keyword-value-color, #07a);\n}\n.token.function {\n  color: var(--code-function-value-color, #DD4A68);\n}\n.token.regex,\n.token.important,\n.token.variable {\n  color: var(--code-variable-value-color, #e90);\n}\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n.token.italic {\n  font-style: italic;\n}\n.token.entity {\n  cursor: help;\n}`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "demo/lib/DemoHelperStyles.ts"
          }
        },
        {
          "kind": "js",
          "name": "prismStyles",
          "declaration": {
            "name": "prismStyles",
            "module": "demo/lib/DemoHelperStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/DemoIconElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An element to render a 24x24 icon.\nBy default it inherits current color. The fill color can be changed by setting\nthe CSS' color property.",
          "name": "DemoIconElement",
          "members": [
            {
              "kind": "field",
              "name": "_icon",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_iconValue",
              "type": {
                "text": "SVGTemplateResult | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "An icon to be rendered from the Icons library.\nWhen incorrect icon is referenced nothing is rendered.",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Icon name"
                }
              ],
              "description": "Maps icon name to it's definition and sets `hasIcon` value."
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "An icon to be rendered from the Icons library.\nWhen incorrect icon is referenced nothing is rendered.",
              "fieldName": "icon"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DemoIconElement",
            "module": "demo/lib/DemoIconElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/DemoPage.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Base class for AWC components demo page.",
          "name": "DemoPage",
          "members": [
            {
              "kind": "field",
              "name": "demoStates",
              "type": {
                "text": "string[]"
              },
              "default": "['Filled', 'Outlined', 'Anypoint']",
              "description": "A list of demo states to be passed to `interactive-demo` element"
            },
            {
              "kind": "field",
              "name": "componentName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Component name rendered in the header section."
            },
            {
              "kind": "field",
              "name": "narrow",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "firstRendered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the initial render had run and the `firstRender()`\nfunction was called."
            },
            {
              "kind": "field",
              "name": "stylesActive",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether or not the styles should be applied to `body.styled` element."
            },
            {
              "kind": "field",
              "name": "_darkThemeActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables Anypoint platform styles."
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables Material's outlined theme."
            },
            {
              "kind": "field",
              "name": "darkThemeActive",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not the dark theme is active"
            },
            {
              "kind": "method",
              "name": "firstRender",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Helper function to be overridden by child classes. It is called when the view\nis rendered for the first time."
            },
            {
              "kind": "method",
              "name": "initMediaQueries",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Initializes media queries for dark system theme."
            },
            {
              "kind": "method",
              "name": "_toggleMainOption",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "A handler for the `change` event for an element that has `checked` and `name` properties.\nThis can be used with `anypoint-switch`, `anypoint-checkbox`, and `checkbox` elements.\n\nThe `name` should correspond to a variable name to be set. The set value is the value\nof `checked` property read from the event's target."
            },
            {
              "kind": "method",
              "name": "_demoStateHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "A handler for the `change` event for the demo state"
            },
            {
              "kind": "method",
              "name": "_updateAnypoint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Depending on the `anypoint` flag state it adds or removes the `anypoint` styles from the body."
            },
            {
              "kind": "method",
              "name": "_mediaQueryHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MediaQueryListEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "headerTemplate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Call this on the top of the `render()` method to render demo navigation"
            },
            {
              "kind": "method",
              "name": "_demoViewControlsTemplate",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Override this function to add some custom custom controls to the\nview controls dropdown."
            },
            {
              "kind": "method",
              "name": "contentTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Abstract method. When not overriding `render()` method you can use\nthis function to render content inside the standard API components layout.\n\n```\ncontentTemplate() {\n return html`<p>Demo content</p>`;\n}\n```"
            },
            {
              "kind": "method",
              "name": "pageTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "The page render function. Usually you don't need to use it.\nIt renders the header template, main section, and the content."
            },
            {
              "kind": "field",
              "name": "_rendering",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_render",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "EventTarget",
            "module": "demo/lib/DemoPage.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DemoPage",
          "declaration": {
            "name": "DemoPage",
            "module": "demo/lib/DemoPage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/Icons.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "message"
        },
        {
          "kind": "variable",
          "name": "refresh"
        },
        {
          "kind": "variable",
          "name": "modeEdit"
        },
        {
          "kind": "variable",
          "name": "star"
        },
        {
          "kind": "variable",
          "name": "add"
        },
        {
          "kind": "variable",
          "name": "cancel"
        },
        {
          "kind": "variable",
          "name": "settings"
        },
        {
          "kind": "variable",
          "name": "toggleOff"
        },
        {
          "kind": "variable",
          "name": "toggleOn"
        },
        {
          "kind": "variable",
          "name": "warning"
        },
        {
          "kind": "variable",
          "name": "zoomIn"
        },
        {
          "kind": "variable",
          "name": "shortText"
        },
        {
          "kind": "variable",
          "name": "spellcheck"
        },
        {
          "kind": "variable",
          "name": "clear"
        },
        {
          "kind": "variable",
          "name": "clearAll"
        },
        {
          "kind": "variable",
          "name": "rateReview"
        },
        {
          "kind": "variable",
          "name": "search"
        },
        {
          "kind": "variable",
          "name": "addCircleOutline"
        },
        {
          "kind": "variable",
          "name": "desktopWindows"
        },
        {
          "kind": "variable",
          "name": "edit"
        },
        {
          "kind": "variable",
          "name": "expandLess"
        },
        {
          "kind": "variable",
          "name": "expandMore"
        },
        {
          "kind": "variable",
          "name": "infoOutline"
        },
        {
          "kind": "variable",
          "name": "menu"
        },
        {
          "kind": "variable",
          "name": "moreVert"
        },
        {
          "kind": "variable",
          "name": "remove"
        },
        {
          "kind": "variable",
          "name": "archive"
        },
        {
          "kind": "variable",
          "name": "close"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "message",
          "declaration": {
            "name": "message",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "refresh",
          "declaration": {
            "name": "refresh",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "modeEdit",
          "declaration": {
            "name": "modeEdit",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "star",
          "declaration": {
            "name": "star",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "add",
          "declaration": {
            "name": "add",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "cancel",
          "declaration": {
            "name": "cancel",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "settings",
          "declaration": {
            "name": "settings",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleOff",
          "declaration": {
            "name": "toggleOff",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleOn",
          "declaration": {
            "name": "toggleOn",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "warning",
          "declaration": {
            "name": "warning",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "zoomIn",
          "declaration": {
            "name": "zoomIn",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "shortText",
          "declaration": {
            "name": "shortText",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "spellcheck",
          "declaration": {
            "name": "spellcheck",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "clear",
          "declaration": {
            "name": "clear",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "clearAll",
          "declaration": {
            "name": "clearAll",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "rateReview",
          "declaration": {
            "name": "rateReview",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "search",
          "declaration": {
            "name": "search",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "addCircleOutline",
          "declaration": {
            "name": "addCircleOutline",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "desktopWindows",
          "declaration": {
            "name": "desktopWindows",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "edit",
          "declaration": {
            "name": "edit",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "expandLess",
          "declaration": {
            "name": "expandLess",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "expandMore",
          "declaration": {
            "name": "expandMore",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "infoOutline",
          "declaration": {
            "name": "infoOutline",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "menu",
          "declaration": {
            "name": "menu",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "moreVert",
          "declaration": {
            "name": "moreVert",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "remove",
          "declaration": {
            "name": "remove",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "archive",
          "declaration": {
            "name": "archive",
            "module": "demo/lib/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "close",
          "declaration": {
            "name": "close",
            "module": "demo/lib/Icons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/InteractiveDemoElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InteractiveDemoElement",
          "members": [
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "The list of general style states for the element.\nIt renders list of tabs with labels from this array.",
              "attribute": "states"
            },
            {
              "kind": "field",
              "name": "dark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set it renders the component in dark theme.",
              "attribute": "dark",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "AnypointTabsElement"
              },
              "return": {
                "type": {
                  "text": "AnypointTabsElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "_selectedState",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "selectedState",
              "type": {
                "text": "number"
              },
              "description": "Currently selected state's index in the `states` array.\nChange dispatches `state-changed` custom event.",
              "attribute": "selectedState"
            },
            {
              "kind": "field",
              "name": "_opened",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "description": "True when the configuration panel is opened.",
              "attribute": "opened"
            },
            {
              "kind": "method",
              "name": "_stateChangeHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleOptions",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_updateTabsTimer",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "_updateTabsAnimation",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateOptionsTabindex",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_activateOptionNode",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_deactivateOptionNode",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_tabsTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_triggerTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_configTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "states",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "The list of general style states for the element.\nIt renders list of tabs with labels from this array.",
              "fieldName": "states"
            },
            {
              "name": "dark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set it renders the component in dark theme.",
              "fieldName": "dark"
            },
            {
              "name": "selectedState",
              "type": {
                "text": "number"
              },
              "description": "Currently selected state's index in the `states` array.\nChange dispatches `state-changed` custom event.",
              "fieldName": "selectedState"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "description": "True when the configuration panel is opened.",
              "fieldName": "opened"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "InteractiveDemoElement",
            "module": "demo/lib/InteractiveDemoElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/InteractiveStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "demo/lib/InteractiveStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/SharedStyles.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/decorators.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "demoProperty"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "demoProperty",
          "declaration": {
            "name": "demoProperty",
            "module": "demo/lib/decorators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/demo-helper.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "demo-helper",
          "declaration": {
            "name": "Element",
            "module": "/demo/lib/DemoHelperElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/demo-icon.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "demo-icon",
          "declaration": {
            "name": "Element",
            "module": "/demo/lib/DemoIconElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "demo/lib/interactive-demo.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "interactive-demo",
          "declaration": {
            "name": "Element",
            "module": "/demo/lib/InteractiveDemoElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/Animations.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DefaultListOpenAnimation",
          "type": {
            "text": "IAnimationConfig[]"
          },
          "default": "[\n  {\n    keyframes: [\n      { \n        opacity: 0,\n        transform: 'scale(0.8)',\n      },\n      { \n        opacity: 1,\n        transform: 'scale(1)',\n      }\n    ],\n    timing: { \n      delay: 0, \n      duration: 120, \n      easing: 'cubic-bezier(0, 0, 0.2, 1)', \n      fill: 'both' \n    }\n  },\n]"
        },
        {
          "kind": "variable",
          "name": "DefaultListCloseAnimation",
          "type": {
            "text": "IAnimationConfig[]"
          },
          "default": "[\n  {\n    keyframes: [\n      { \n        opacity: 1,\n        transform: 'scale(1)',\n      },\n      { \n        opacity: 0,\n        transform: 'scale(0.8)',\n      },\n    ],\n    timing: { \n      delay: 0, \n      duration: 120, \n      easing: 'cubic-bezier(0, 0, 0.2, 1)', \n      fill: 'both' \n    }\n  },\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DefaultListOpenAnimation",
          "declaration": {
            "name": "DefaultListOpenAnimation",
            "module": "src/lib/Animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultListCloseAnimation",
          "declaration": {
            "name": "DefaultListCloseAnimation",
            "module": "src/lib/Animations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/ElementEventsRegistry.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addListener",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "eventType",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "EventListener | undefined"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "EventTarget"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getListener",
          "return": {
            "type": {
              "text": "EventListener | undefined"
            }
          },
          "parameters": [
            {
              "name": "eventType",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "EventTarget"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addListener",
          "declaration": {
            "name": "addListener",
            "module": "src/lib/ElementEventsRegistry.ts"
          }
        },
        {
          "kind": "js",
          "name": "getListener",
          "declaration": {
            "name": "getListener",
            "module": "src/lib/ElementEventsRegistry.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/ElementMetrics.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ElementMetrics",
          "members": [
            {
              "kind": "field",
              "name": "boundingRect",
              "type": {
                "text": "DOMRect"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "MaterialRippleElement"
              },
              "default": "element"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "furthestCornerDistanceFrom",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ElementMetrics",
          "declaration": {
            "name": "ElementMetrics",
            "module": "src/lib/ElementMetrics.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/FocusableHelper.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FocusableHelper",
          "members": [
            {
              "kind": "method",
              "name": "getTabbableNodes",
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Returns a sorted array of tabbable nodes, including the root node.\nIt searches the tabbable nodes in the light and shadow dom of the children,\nsorting the result by tabindex"
            },
            {
              "kind": "method",
              "name": "isFocusable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Returns if a element is focusable."
            },
            {
              "kind": "method",
              "name": "isTabbable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Returns if a element is tabbable. To be tabbable, a element must be\nfocusable, visible, and with a tabindex !== -1."
            },
            {
              "kind": "method",
              "name": "_normalizedTabIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Returns the normalized element tabindex. If not focusable, returns -1.\nIt checks for the attribute \"tabindex\" instead of the element property\n`tabIndex` since browsers assign different values to it.\ne.g. in Firefox `<div contenteditable>` has `tabIndex = -1`"
            },
            {
              "kind": "method",
              "name": "_collectTabbableNodes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  },
                  "description": "The starting point for the search; added to `result`\nif tabbable."
                },
                {
                  "name": "result",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "description": "Searches for nodes that are tabbable and adds them to the `result` array.\nReturns if the `result` array needs to be sorted by tabindex."
            },
            {
              "kind": "method",
              "name": "_isVisible",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Returns false if the element has `visibility: hidden` or `display: none`"
            },
            {
              "kind": "method",
              "name": "_sortByTabIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement[]"
                }
              },
              "parameters": [
                {
                  "name": "tabbables",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "description": "Sorts an array of tabbable elements by tabindex. Returns a new array."
            },
            {
              "kind": "method",
              "name": "_mergeSortByTabIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement[]"
                }
              },
              "parameters": [
                {
                  "name": "left",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "right",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "description": "Merge sort iterator, merges the two arrays into one, sorted by tab index."
            },
            {
              "kind": "method",
              "name": "_hasLowerTabOrder",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "a",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Returns if element `a` has lower tab order compared to element `b`\n(both elements are assumed to be focusable and tabbable).\nElements with tabindex = 0 have lower tab order compared to elements\nwith tabindex > 0.\nIf both have same tabindex, it returns false."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusableHelper",
          "declaration": {
            "name": "FocusableHelper",
            "module": "src/lib/FocusableHelper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/OverlayManager.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The class was originally designed by Polymer team.",
          "name": "OverlayManager",
          "members": [
            {
              "kind": "field",
              "name": "_overlays",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "default": "[]",
              "description": "Used to keep track of the opened overlays."
            },
            {
              "kind": "field",
              "name": "_minimumZ",
              "type": {
                "text": "number"
              },
              "default": "101",
              "description": "iframes have a default z-index of 100,\nso this default should be at least that."
            },
            {
              "kind": "field",
              "name": "_backdropElement",
              "type": {
                "text": "OverlayBackdrop | null"
              },
              "default": "null",
              "description": "Memoized backdrop element."
            },
            {
              "kind": "field",
              "name": "backdropElement",
              "type": {
                "text": "OverlayBackdrop"
              },
              "description": "The shared backdrop element."
            },
            {
              "kind": "field",
              "name": "deepActiveElement",
              "type": {
                "text": "Element"
              },
              "description": "The deepest active element.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_bringOverlayAtIndexToFront",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "i",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Brings the overlay at the specified index to the front."
            },
            {
              "kind": "method",
              "name": "addOrRemoveOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "overlay",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Adds the overlay and updates its z-index if it's opened, or removes it if\nit's closed. Also updates the backdrop z-index."
            },
            {
              "kind": "method",
              "name": "addOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "overlay",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Tracks overlays for z-index and focus management.\nEnsures the last added overlay with always-on-top remains on top."
            },
            {
              "kind": "method",
              "name": "removeOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "overlay",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "currentOverlay",
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              },
              "description": "Returns the current overlay."
            },
            {
              "kind": "method",
              "name": "currentOverlayZ",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Returns the current overlay z-index."
            },
            {
              "kind": "method",
              "name": "ensureMinimumZ",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "minimumZ",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Ensures that the minimum z-index of new overlays is at least `minimumZ`.\nThis does not effect the z-index of any existing overlays."
            },
            {
              "kind": "method",
              "name": "focusOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "trackBackdrop",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the backdrop z-index."
            },
            {
              "kind": "method",
              "name": "getBackdrops",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "backdropZ",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Returns the z-index for the backdrop."
            },
            {
              "kind": "method",
              "name": "_overlayWithBackdrop",
              "return": {
                "type": {
                  "text": "!HTMLElement|undefined"
                }
              },
              "description": "Returns the top opened overlay that has a backdrop.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getZ",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "overlay",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Calculates the minimum z-index for the overlay."
            },
            {
              "kind": "method",
              "name": "_setZ",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "z",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_applyOverlayZ",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "overlay",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "aboveZ",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_overlayInPath",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Element|undefined"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "description": "Returns the deepest overlay in the path."
            },
            {
              "kind": "method",
              "name": "_onCaptureClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Ensures the click event is delegated to the right overlay."
            },
            {
              "kind": "method",
              "name": "_clickIsInsideOverlay",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "clickEvent",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onCaptureFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Ensures the focus event is delegated to the right overlay."
            },
            {
              "kind": "method",
              "name": "_onCaptureKeyDown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Ensures TAB and ESC keyboard events are delegated to the right overlay."
            },
            {
              "kind": "method",
              "name": "_keyboardEventMatchesKeys",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_shouldBeBehindOverlay",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "overlay1",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "overlay2",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Returns if the overlay1 should be behind overlay2."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayManager",
          "declaration": {
            "name": "OverlayManager",
            "module": "src/lib/OverlayManager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/Ripple.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Ripple",
          "members": [
            {
              "kind": "field",
              "name": "MAX_RADIUS",
              "type": {
                "text": "number"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "recenters",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "center",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "mouseDownElapsed",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "mouseUpElapsed",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "mouseDownElapsedSeconds",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "mouseUpElapsedSeconds",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "mouseInteractionSeconds",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "initialOpacity",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "opacityDecayVelocity",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "radius",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "outerOpacity",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "isOpacityFullyDecayed",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "isRestingAtMaxRadius",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "isAnimationComplete",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "translationFraction",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "xNow",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "yNow",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "isMouseDown",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "type": {
                "text": "MaterialRippleElement"
              },
              "default": "element"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "wave",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "waveContainer",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "maxRadius",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "mouseDownStart",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "mouseUpStart",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "xStart",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "yStart",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "xEnd",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "yEnd",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "slideDistance",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "containerMetrics",
              "type": {
                "text": "ElementMetrics"
              },
              "default": "new ElementMetrics(this.element)"
            },
            {
              "kind": "method",
              "name": "resetInteractionState",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "draw",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "downAction",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "optional": true,
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "upAction",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "backgroundColor"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Ripple",
          "declaration": {
            "name": "Ripple",
            "module": "src/lib/Ripple.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/ScrollManager.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "_boundScrollHandler",
          "type": {
            "text": "(event: any) => void | undefined"
          }
        },
        {
          "kind": "variable",
          "name": "currentLockingElement",
          "type": {
            "text": "Node|undefined"
          }
        },
        {
          "kind": "variable",
          "name": "_lockingElements",
          "type": {
            "text": "HTMLElement[]"
          },
          "default": "[]"
        },
        {
          "kind": "variable",
          "name": "_lockedElementCache",
          "type": {
            "text": "HTMLElement[] | null"
          },
          "default": "null"
        },
        {
          "kind": "variable",
          "name": "_unlockedElementCache",
          "type": {
            "text": "HTMLElement[] | null"
          },
          "default": "null"
        },
        {
          "kind": "function",
          "name": "_getScrollInfo",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event"
              },
              "description": "The scroll event"
            }
          ],
          "description": "Returns scroll `deltaX` and `deltaY`."
        },
        {
          "kind": "function",
          "name": "_getScrollingNode",
          "return": {
            "type": {
              "text": "Node|undefined"
            }
          },
          "parameters": [
            {
              "name": "nodes",
              "type": {
                "text": "Node[]"
              }
            },
            {
              "name": "deltaX",
              "type": {
                "text": "number"
              },
              "description": "Scroll delta on the x-axis"
            },
            {
              "name": "deltaY",
              "type": {
                "text": "number"
              },
              "description": "Scroll delta on the y-axis"
            }
          ],
          "description": "Returns the node that is scrolling. If there is no scrolling,\nreturns undefined."
        },
        {
          "kind": "function",
          "name": "_getScrollableNodes",
          "return": {
            "type": {
              "text": "HTMLElement[]"
            }
          },
          "parameters": [
            {
              "name": "nodes",
              "type": {
                "text": "Node[]"
              }
            }
          ],
          "description": "Returns an array of scrollable nodes up to the current locking element,\nwhich is included too if scrollable."
        },
        {
          "kind": "function",
          "name": "_hasCachedLockedElement",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "_hasCachedUnlockedElement",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "_composedTreeContains",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "child",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "_shouldPreventScrolling",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ],
          "description": "Returns true if the event causes scroll outside the current locking\nelement, e.g. pointer/keyboard interactions, or scroll \"leaking\"\noutside the locking element when it is already at its scroll boundaries."
        },
        {
          "kind": "function",
          "name": "_scrollInteractionHandler",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event | TouchEvent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "elementIsScrollLocked",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "An HTML element instance which may or may not be scroll locked."
            }
          ],
          "description": "Returns true if the provided element is \"scroll locked\", which is to\nsay that it cannot be scrolled via pointer or keyboard interactions."
        },
        {
          "kind": "function",
          "name": "_lockScrollInteractions",
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "function",
          "name": "_unlockScrollInteractions",
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "function",
          "name": "pushScrollLock",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element that should lock scroll."
            }
          ],
          "description": "Push an element onto the current scroll lock stack. The most recently\npushed element and its children will be considered scrollable. All\nother elements will not be scrollable.\n\nScroll locking is implemented as a stack so that cases such as\ndropdowns within dropdowns are handled well."
        },
        {
          "kind": "function",
          "name": "removeScrollLock",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element to remove from the scroll lock stack."
            }
          ],
          "description": "Remove an element from the scroll lock stack. The element being\nremoved does not need to be the most recently pushed element. However,\nthe scroll lock constraints only change when the most recently pushed\nelement is removed."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_lockingElements",
          "declaration": {
            "name": "_lockingElements",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_lockedElementCache",
          "declaration": {
            "name": "_lockedElementCache",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_unlockedElementCache",
          "declaration": {
            "name": "_unlockedElementCache",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "currentLockingElement",
          "declaration": {
            "name": "currentLockingElement",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_getScrollInfo",
          "declaration": {
            "name": "_getScrollInfo",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_getScrollingNode",
          "declaration": {
            "name": "_getScrollingNode",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_getScrollableNodes",
          "declaration": {
            "name": "_getScrollableNodes",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_hasCachedLockedElement",
          "declaration": {
            "name": "_hasCachedLockedElement",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_hasCachedUnlockedElement",
          "declaration": {
            "name": "_hasCachedUnlockedElement",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_composedTreeContains",
          "declaration": {
            "name": "_composedTreeContains",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_shouldPreventScrolling",
          "declaration": {
            "name": "_shouldPreventScrolling",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_scrollInteractionHandler",
          "declaration": {
            "name": "_scrollInteractionHandler",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "elementIsScrollLocked",
          "declaration": {
            "name": "elementIsScrollLocked",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_lockScrollInteractions",
          "declaration": {
            "name": "_lockScrollInteractions",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_unlockScrollInteractions",
          "declaration": {
            "name": "_unlockScrollInteractions",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "pushScrollLock",
          "declaration": {
            "name": "pushScrollLock",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeScrollLock",
          "declaration": {
            "name": "removeScrollLock",
            "module": "src/lib/ScrollManager.ts"
          }
        },
        {
          "kind": "js",
          "name": "_boundScrollHandler",
          "declaration": {
            "name": "_boundScrollHandler",
            "module": "src/lib/ScrollManager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/lib/Utility.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "distance",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "x1",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "y1",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "x2",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "y2",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "now",
          "type": {
            "text": "() => number"
          }
        },
        {
          "kind": "function",
          "name": "isRadioButton",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "node",
              "type": {
                "text": "Node"
              },
              "description": "A node to test"
            }
          ],
          "description": "Tests if given node is a radio button."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "distance",
          "declaration": {
            "name": "distance",
            "module": "src/lib/Utility.ts"
          }
        },
        {
          "kind": "js",
          "name": "now",
          "declaration": {
            "name": "now",
            "module": "src/lib/Utility.ts"
          }
        },
        {
          "kind": "js",
          "name": "isRadioButton",
          "declaration": {
            "name": "isRadioButton",
            "module": "src/lib/Utility.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/resources/AnypointSwitchIcons.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "onIcon",
          "default": "html`<svg viewBox=\"0 0 16 16\">\n  <path d=\"M11.605 3.086L6.898 9.803 4.311 7.991 3.164 9.629l4.225 2.959 5.657-8.073c-.396-.554-.884-1.037-1.441-1.429z\"></path>\n</svg>`"
        },
        {
          "kind": "variable",
          "name": "offIcon",
          "default": "html`<svg viewBox=\"0 0 16 16\">\n  <path d=\"M13.289 3.418c-.218-.252-.455-.489-.707-.707L8 7.293 3.418 2.711c-.252.218-.489.455-.707.707L7.293 8l-4.582 4.582c.218.252.455.489.707.707L8 8.707l4.582 4.582c.252-.218.489-.455.707-.707L8.707 8l4.582-4.582z\"></path>\n</svg>`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "onIcon",
          "declaration": {
            "name": "onIcon",
            "module": "src/resources/AnypointSwitchIcons.ts"
          }
        },
        {
          "kind": "js",
          "name": "offIcon",
          "declaration": {
            "name": "offIcon",
            "module": "src/resources/AnypointSwitchIcons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/resources/Icons.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "iconWrapper",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "tpl",
              "type": {
                "text": "SVGTemplateResult"
              },
              "description": "Icon definition"
            }
          ],
          "description": "Wraps icon into an SVG container."
        },
        {
          "kind": "variable",
          "name": "arrowDown"
        },
        {
          "kind": "variable",
          "name": "clear"
        },
        {
          "kind": "variable",
          "name": "visibility"
        },
        {
          "kind": "variable",
          "name": "visibilityOff"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "iconWrapper",
          "declaration": {
            "name": "iconWrapper",
            "module": "src/resources/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "arrowDown",
          "declaration": {
            "name": "arrowDown",
            "module": "src/resources/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "clear",
          "declaration": {
            "name": "clear",
            "module": "src/resources/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "visibility",
          "declaration": {
            "name": "visibility",
            "module": "src/resources/Icons.ts"
          }
        },
        {
          "kind": "js",
          "name": "visibilityOff",
          "declaration": {
            "name": "visibilityOff",
            "module": "src/resources/Icons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/AnypointInputMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "AnypointInputMixin",
          "description": "Use `AnypointInputMixin` to implement accessible inputs"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnypointInputMixin",
          "declaration": {
            "name": "AnypointInputMixin",
            "module": "src/mixins/AnypointInputMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/AnypointSelection.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Port of `@polymer/iron-selector/iron-selection.js`.",
          "name": "AnypointSelection",
          "members": [
            {
              "kind": "field",
              "name": "multi",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "unknown[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "selectCallback",
              "type": {
                "text": "Function"
              },
              "default": "selectCallback"
            },
            {
              "kind": "method",
              "name": "get",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Retrieves the selected item(s)."
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "excludes",
                  "optional": true,
                  "type": {
                    "text": "unknown[]"
                  },
                  "description": "items to be excluded."
                }
              ],
              "description": "Clears all the selection except the ones indicated."
            },
            {
              "kind": "method",
              "name": "isSelected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The item whose selection state should be checked."
                }
              ],
              "description": "Indicates if a given item is selected."
            },
            {
              "kind": "method",
              "name": "setItemSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The item to select."
                },
                {
                  "name": "isSelected",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "True for selected, false for deselected."
                }
              ],
              "description": "Sets the selection state for a given item to either selected or deselected."
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The item to select."
                }
              ],
              "description": "Sets the selection state for a given item. If the `multi` property\nis true, then the selected state of `item` will be toggled; otherwise\nthe `item` will be selected."
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "unknown"
                  },
                  "description": "The item to toggle."
                }
              ],
              "description": "Toggles the selection state for `item`."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnypointSelection",
          "declaration": {
            "name": "AnypointSelection",
            "module": "src/mixins/AnypointSelection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/ButtonStateMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ButtonStateMixin",
          "description": "Use `ButtonStateMixin` to implement an element that can be pressed and active when toggles."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ButtonStateMixin",
          "declaration": {
            "name": "ButtonStateMixin",
            "module": "src/mixins/ButtonStateMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/CheckedElementMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CheckedElementMixin",
          "description": "Use `CheckedElementMixin` to implement an element that can be pressed and active when toggles."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CheckedElementMixin",
          "declaration": {
            "name": "CheckedElementMixin",
            "module": "src/mixins/CheckedElementMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/ControlStateMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ControlStateMixin",
          "description": "Use `ControlStateMixin` to implement an element that can be disabled or focused."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ControlStateMixin",
          "declaration": {
            "name": "ControlStateMixin",
            "module": "src/mixins/ControlStateMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/EventsTargetMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "EventsTargetMixin",
          "description": "`EventsTargetMixin` is a mixin that allows to set event listeners on a default or set node.\n\nBy default the element listens on the `window` element for events. By setting\n`eventsTarget` property on this element it removes all previously set\nlisteners and adds the same listeners to the node.\nIt also restores default state when the `eventsTarget` is removed.\n\nImplementations should implement two abstract methods:\n`_attachListeners(node)` and `_detachListeners(node)`. Both of them will be\ncalled with event target argument when it's required to either set or remove\nlisteners.\n\n```javascript\nclass EventableElement extends EventsTargetMixin(HTMLElement) {\n  _attachListeners: function(node) {\n   mode.addEventListener('event', this._callback);\n }\n\n _detachListeners: function(node) {\n   mode.removeEventListener('event', this._callback);\n }\n}\n```\n\nThe mixin handles connectedCallback / disconnectedCallback and calls the\nfunctions with required parameters."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventsTargetMixin",
          "declaration": {
            "name": "EventsTargetMixin",
            "module": "src/mixins/EventsTargetMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/FitMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FitMixin",
          "description": "This mixin is a port of https://github.com/PolymerElements/iron-fit-behavior\nthat works with LitElement.\n\n`FitMixin` fits an element in another element using `max-height`\nand `max-width`, and optionally centers it in the window or another element.\nThe element will only be sized and/or positioned if it has not already been\nsized and/or positioned by CSS.\n\nCSS properties            | Action\n--------------------------|-------------------------------------------\n`position` set            | Element is not centered horizontally or vertically\n`top` or `bottom` set     | Element is not vertically centered\n`left` or `right` set     | Element is not horizontally centered\n`max-height` set          | Element respects `max-height`\n`max-width` set           | Element respects `max-width`\n\n`FitMixin` can position an element into another element using\n`verticalAlign` and `horizontalAlign`. This will override the element's css\nposition.\n\n    <div class=\"container\">\n      <arc-fit-impl verticalalign=\"top\" horizontalAlign=\"auto\">\n        Positioned into the container\n      </arc-fit-impl>\n    </div>\n\nUse `noOverlap` to position the element around another element without\noverlapping it.\n\n    <div class=\"container\">\n      <arc-fit-impl noOverlap verticalalign=\"auto\" horizontalAlign=\"auto\">\n        Positioned around the container\n      </arc-fit-impl>\n    </div>\n\nUse `horizontalOffset, verticalOffset` to offset the element from its\n`positionTarget`; `FitMixin` will collapse these in order to\nkeep the element within `fitInto` boundaries, while preserving the element's\nCSS margin values.\n\n    <div class=\"container\">\n      <arc-fit-impl verticalalign=\"top\" verticalOffset=\"20\">\n        With vertical offset\n      </arc-fit-impl>\n    </div>\n\n## Usage\n\n```javascript\nimport { LitElement } from 'lit-element';\nimport { FitMixin } from 'anypoint-web-components/awc';\n\nclass ArcFitImpl extends FitMixin(LitElement) {\n ...\n}\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FitMixin",
          "declaration": {
            "name": "FitMixin",
            "module": "src/mixins/FitMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/HoverableMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "HoverableMixin",
          "description": "Use `HoverableMixin` to implement an element that can be hovered.\nThe control gets a `hovered` attribute when it's hovered by the pointing device.\n\nBe aware that mobile devices will not support hovering as desktop devices and behavior\nmay vary depending on platform. You should use this as little as possible."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HoverableMixin",
          "declaration": {
            "name": "HoverableMixin",
            "module": "src/mixins/HoverableMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/MenuMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "highlightedItem",
          "type": {
            "text": "string"
          },
          "default": "'__highlighteditem'"
        },
        {
          "kind": "variable",
          "name": "highlightedItemValue",
          "type": {
            "text": "string"
          },
          "default": "'__highlighteditemvalue'"
        },
        {
          "kind": "variable",
          "name": "MenuMixin",
          "description": "Port of `@polymer/iron-selector/iron-multi-selectable.js`.\n\nA mixin to be applied to a class where child elements can be selected and selection\ncan be applied to more than one item.\n\nNote, by default the mixin works with LitElement. If used with different class\nmake sure that attributes are reflected to properties correctly."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "highlightedItem",
          "declaration": {
            "name": "highlightedItem",
            "module": "src/mixins/MenuMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "highlightedItemValue",
          "declaration": {
            "name": "highlightedItemValue",
            "module": "src/mixins/MenuMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "MenuMixin",
          "declaration": {
            "name": "MenuMixin",
            "module": "src/mixins/MenuMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/MenubarMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MenubarMixin",
          "description": "Port of `@polymer/iron-menubar-behavior`.\n\nA mixin that implement accessible menubar.\n\nNote, by default the mixin works with LitElement. If used with different class\nmake sure that attributes are reflected to properties correctly."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenubarMixin",
          "declaration": {
            "name": "MenubarMixin",
            "module": "src/mixins/MenubarMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/MultiSelectableMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MultiSelectableMixin",
          "description": "Port of `@polymer/iron-selector/iron-multi-selectable.js`.\n\nA mixin to be applied to a class where child elements can be selected and selection\ncan be applied to more than one item.\n\nNote, by default the mixin works with LitElement. If used with different class\nmake sure that attributes are reflected to properties correctly."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MultiSelectableMixin",
          "declaration": {
            "name": "MultiSelectableMixin",
            "module": "src/mixins/MultiSelectableMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/OverlayMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "OverlayMixin",
          "description": "This mixin is a port of [IronOverlayBehavior](https://github.com/PolymerElements/iron-overlay-behavior)\nthat works with LitElement.\n\nUse `OverlayMixin` to implement an element that can be hidden\nor shown, and displays on top of other content. It includes an optional\nbackdrop, and can be used to implement a variety of UI controls including\ndialogs and drop downs. Multiple overlays may be displayed at once.\nSee the [demo source\ncode](https://github.com/advanced-rest-client/arc-overlay-mixin/blob/master/demo/simple-overlay.html)\nfor an example.\n\n### Closing and canceling\n\nAn overlay may be hidden by closing or canceling. The difference between close\nand cancel is user intent. Closing generally implies that the user\nacknowledged the content on the overlay. By default, it will cancel whenever\nthe user taps outside it or presses the escape key. This behavior is\nconfigurable with the `noCancelOnEscKey` and the\n`noCancelOnOutsideClick` properties. `close()` should be called explicitly\nby the implementer when the user interacts with a control in the overlay\nelement. When the dialog is canceled, the overlay fires an\n'overlay-canceled' event. Call `preventDefault` on this event to prevent\nthe overlay from closing.\n\n### Positioning\n\nBy default the element is sized and positioned to fit and centered inside the\nwindow. You can position and size it manually using CSS. See `FitMixin`.\n\n### Backdrop\n\nSet the `withBackdrop` attribute to display a backdrop behind the overlay.\nThe backdrop is appended to `<body>` and is of type `<arc-overlay-backdrop>`.\nSee its doc page for styling options.\nIn addition, `withBackdrop` will wrap the focus within the content in the\nlight DOM. Override the [`_focusableNodes`\ngetter](#FitMixin:property-_focusableNodes) to achieve a\ndifferent behavior.\n\n### Limitations\n\nThe element is styled to appear on top of other content by setting its\n`z-index` property. You must ensure no element has a stacking context with a\nhigher `z-index` than its parent stacking context. You should place this\nelement as a child of `<body>` whenever possible.\n\n\n## Usage\n\n```javascript\nimport { LitElement } from 'lit-element';\nimport { OverlayMixin } from '@anypoint-web-components/awc';\n\nclass ArcOverlayImpl extends OverlayMixin(LitElement) {\n ...\n}\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayMixin",
          "declaration": {
            "name": "OverlayMixin",
            "module": "src/mixins/OverlayMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/RangeMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ratioValue"
        },
        {
          "kind": "variable",
          "name": "rangeChanged"
        },
        {
          "kind": "variable",
          "name": "computeStep"
        },
        {
          "kind": "variable",
          "name": "clampValue"
        },
        {
          "kind": "variable",
          "name": "computeRatio"
        },
        {
          "kind": "variable",
          "name": "validateValue"
        },
        {
          "kind": "variable",
          "name": "valueValue"
        },
        {
          "kind": "variable",
          "name": "minValue"
        },
        {
          "kind": "variable",
          "name": "maxValue"
        },
        {
          "kind": "variable",
          "name": "stepValue"
        },
        {
          "kind": "variable",
          "name": "computeDebounce"
        },
        {
          "kind": "variable",
          "name": "debounceValue"
        },
        {
          "kind": "variable",
          "name": "RangeMixin",
          "description": "Use `RangeMixin` to implement an element that has a range of minimum and maximum.\n\nThis is inspired by Polymer's `iron-range-behavior`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ratioValue",
          "declaration": {
            "name": "ratioValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "rangeChanged",
          "declaration": {
            "name": "rangeChanged",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "computeStep",
          "declaration": {
            "name": "computeStep",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "clampValue",
          "declaration": {
            "name": "clampValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "computeRatio",
          "declaration": {
            "name": "computeRatio",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "validateValue",
          "declaration": {
            "name": "validateValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "valueValue",
          "declaration": {
            "name": "valueValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "minValue",
          "declaration": {
            "name": "minValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxValue",
          "declaration": {
            "name": "maxValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "stepValue",
          "declaration": {
            "name": "stepValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "computeDebounce",
          "declaration": {
            "name": "computeDebounce",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "debounceValue",
          "declaration": {
            "name": "debounceValue",
            "module": "src/mixins/RangeMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "RangeMixin",
          "declaration": {
            "name": "RangeMixin",
            "module": "src/mixins/RangeMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/ResizableMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "resizeNotificationEventType",
          "type": {
            "text": "string"
          },
          "default": "'requestresizenotifications'"
        },
        {
          "kind": "variable",
          "name": "resizeEventType",
          "type": {
            "text": "string"
          },
          "default": "'resize'"
        },
        {
          "kind": "variable",
          "name": "ResizableMixin",
          "description": "This mixin is a port of [IronResizableBehavior]https://github.com/PolymerElements/iron-resizable-behavior\nthat works with LitElement.\n\n`ResizableMixin` is a behavior that can be used in web components to\ncoordinate the flow of resize events between \"resizers\" (elements that\ncontrol the size or hidden state of their children) and \"resizables\" (elements\nthat need to be notified when they are resized or un-hidden by their parents\nin order to take action on their new measurements).\n\nElements that perform measurement should add the `ResizableMixin` mixin to their element definition and listen for the `resize` event on themselves. \nThis event will be fired when they become showing after having been hidden, when they are resized explicitly by another resizable, or when the window has been resized.\n\nNote, the `resize` event is non-bubbling.\n\n## Usage\n\n```javascript\nimport { LitElement } from 'lit-element';\nimport { ResizableMixin } from 'anypoint-web-components/awc';\n\nclass ResizableImpl extends ResizableMixin(LitElement) {\n ...\n}\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "resizeNotificationEventType",
          "declaration": {
            "name": "resizeNotificationEventType",
            "module": "src/mixins/ResizableMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "resizeEventType",
          "declaration": {
            "name": "resizeEventType",
            "module": "src/mixins/ResizableMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "ResizableMixin",
          "declaration": {
            "name": "ResizableMixin",
            "module": "src/mixins/ResizableMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/ScrollTargetMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ScrollTargetMixin",
          "description": "This mixin is a port of [IronScrollTargetBehavior](https://github.com/PolymerElements/iron-acroll-target-behavior)\nthat works with LitElements.\n\n`ScrollTargetMixin` allows an element to respond to scroll\nevents from a designated scroll target.\n\nElements that consume this mixin can override the `_scrollHandler`\nmethod to add logic on the scroll event."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollTargetMixin",
          "declaration": {
            "name": "ScrollTargetMixin",
            "module": "src/mixins/ScrollTargetMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/SelectableMixin.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "matchesSelector",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "node",
              "type": {
                "text": "Node"
              },
              "description": "Node to check selector against"
            },
            {
              "name": "selector",
              "type": {
                "text": "string"
              },
              "description": "Selector to match"
            }
          ],
          "description": "Cross-platform `element.matches` shim."
        },
        {
          "kind": "variable",
          "name": "SelectableMixin",
          "description": "Port of `@polymer/iron-selector/iron-selectable.js`.\n\nA mixin to be applied to a class where child elements can be selected.\n\nNote, by default the mixin works with LitElement. If used with different class\nmake sure that attributes are reflected to properties correctly."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "matchesSelector",
          "declaration": {
            "name": "matchesSelector",
            "module": "src/mixins/SelectableMixin.ts"
          }
        },
        {
          "kind": "js",
          "name": "SelectableMixin",
          "declaration": {
            "name": "SelectableMixin",
            "module": "src/mixins/SelectableMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/ValidatableMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ValidatableMixin",
          "description": "This validatable supports multiple validators.\n\nUse `ValidatableMixin` to implement an element that validates user input.\nUse the related `ArcValidatorBehavior` to add custom validation logic\nto an iron-input or other wrappers around native inputs.\n\nBy default, an `<iron-form>` element validates its fields when the user presses the submit\nbutton.\nTo validate a form imperatively, call the form's `validate()` method, which in turn will\ncall `validate()` on all its children. By using `ValidatableMixin`, your\ncustom element will get a public `validate()`, which will return the validity\nof the element, and a corresponding `invalid` attribute, which can be used for styling.\n\nTo implement the custom validation logic of your element, you must override\nthe protected `_getValidity()` method of this behaviour, rather than `validate()`.\nSee [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\nfor an example.\n\n### Accessibility\n\nChanging the `invalid` property, either manually or by calling `validate()` will update the\n`aria-invalid` attribute."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidatableMixin",
          "declaration": {
            "name": "ValidatableMixin",
            "module": "src/mixins/ValidatableMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/ValidatorMixin.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ValidatorMixin",
          "description": "Use `ValidatorMixin` to implement a custom input/form validator.\nElement instances implementing this mixin will be registered for use\nin elements that implement `ValidatableMixin`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ValidatorMixin",
          "declaration": {
            "name": "ValidatorMixin",
            "module": "src/mixins/ValidatorMixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mixins/ValidatorStore.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "register",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "validator",
              "type": {
                "text": "typeof HTMLElement|Object"
              },
              "description": "An instance of the validator. It expects to be a\ntype of an HTMLElement, LitElement etc but can also be an object."
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "Validator name used in the global validators registry."
            }
          ],
          "description": "Registers a new validator element in the store.\nThe validator can be accessed by the `get(validatorName)` function."
        },
        {
          "kind": "function",
          "name": "unregister",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "validator",
              "type": {
                "text": "typeof HTMLElement|Object"
              },
              "description": "An instance of the validator. It expects to be a\ntype of an HTMLElement, LitElement etc but can also be an object."
            }
          ],
          "description": "Removes the validator from the store.\nThis intentionally uses an instance of validator instead of the name to remove\nthe ref from the object when the instance of an element is being removed from\nthe DOM."
        },
        {
          "kind": "function",
          "name": "get",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "Validator name used in the global validators registry."
            }
          ],
          "description": "Registers a new validator element in the store.\nThe validator can be accessed by the `get(validatorName)` function."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "register",
          "declaration": {
            "name": "register",
            "module": "src/mixins/ValidatorStore.ts"
          }
        },
        {
          "kind": "js",
          "name": "unregister",
          "declaration": {
            "name": "unregister",
            "module": "src/mixins/ValidatorStore.ts"
          }
        },
        {
          "kind": "js",
          "name": "get",
          "declaration": {
            "name": "get",
            "module": "src/mixins/ValidatorStore.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-autocomplete.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-autocomplete",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointAutocompleteElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-button.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-button",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointButtonElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-checkbox.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-checkbox",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointCheckboxElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-chip-input.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-chip-input",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointChipInputElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-chip.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-chip",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointChipElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-collapse.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-collapse",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointCollapseElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-combobox.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-combobox",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointComboboxElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-dialog-scrollable.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-dialog-scrollable",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointDialogScrollableElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-dialog.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-dialog",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointDialogElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-dropdown-menu.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-dropdown-menu",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointDropdownMenuElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-dropdown.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-dropdown",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointDropdownElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-icon-button.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-icon-button",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointIconButtonElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-icon-item.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-icon-item",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointIconItemElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-input-combobox.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-input-combobox",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointInputComboboxElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-input.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-input",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointInputElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-item-body.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-item-body",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointItemBodyElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-item.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-item",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointItemElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-listbox.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-listbox",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointListboxElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-masked-input.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-masked-input",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointMaskedInput.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-menu-button.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-menu-button",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointMenuButtonElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-progress.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-progress",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointProgressElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-radio-button.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-radio-button",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointRadioButtonElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-radio-group.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-radio-group",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointRadioGroupElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-selector.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-selector",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointSelectorElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-switch.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-switch",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointSwitchElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-tab.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-tab",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointTabElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-tabs.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-tabs",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointTabsElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/anypoint-textarea.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "anypoint-textarea",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/AnypointTextareaElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/bottom-sheet.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "bottom-sheet",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/BottomSheetElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/color-input-selector.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "color-input-selector",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/ColorInputSelectorElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/color-selector.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "color-selector",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/ColorSelectorElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/date-time.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "date-time",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/DateTimeElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/focusable-helper.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FocusableHelper",
          "default": "new Helper()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FocusableHelper",
          "declaration": {
            "name": "FocusableHelper",
            "module": "src/define/focusable-helper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/material-ripple.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "material-ripple",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/MaterialRippleElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/overlay-backdrop.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "arc-overlay-backdrop",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/OverlayBackdropElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/overlay-manager.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "OverlayManager",
          "default": "new Manager()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverlayManager",
          "declaration": {
            "name": "OverlayManager",
            "module": "src/define/overlay-manager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/scroll-threshold.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "scroll-threshold",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/ScrollThresholdElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/define/star-rating.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "star-rating",
          "declaration": {
            "name": "Element",
            "module": "/src/elements/StarRatingElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/AnypointChipInput.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/AnypointChipInput.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/AnypointDialogInternalStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/AnypointDialogInternalStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/AnypointDialogStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/AnypointDialogStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/BottomSheet.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/BottomSheet.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/Button.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/Button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/ButtonIcon.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/ButtonIcon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/Checkbox.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/Checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/ChipStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/ChipStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/ColorInputSelectorElement.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/ColorInputSelectorElement.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/ColorSelectorElement.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/ColorSelectorElement.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/DropdownMenu.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/DropdownMenu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/InputComboboxStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/InputComboboxStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/ItemStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/ItemStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/MenuButton.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/MenuButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/Progress.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/Progress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/RadioButton.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/RadioButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/Switch.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/Switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/TabsStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/TabsStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/anypoint-input-styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/anypoint-input-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/styles/ripple.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/styles/ripple.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointAutocompleteElement.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "suggestionsValue"
        },
        {
          "kind": "variable",
          "name": "processSource"
        },
        {
          "kind": "variable",
          "name": "normalizeSource"
        },
        {
          "kind": "variable",
          "name": "itemTemplate"
        },
        {
          "kind": "variable",
          "name": "readLabelValue"
        },
        {
          "kind": "variable",
          "name": "openedValue"
        },
        {
          "kind": "variable",
          "name": "openedValuePrivate"
        },
        {
          "kind": "variable",
          "name": "autocompleteFocus"
        },
        {
          "kind": "variable",
          "name": "ignoreNextFocus"
        },
        {
          "kind": "class",
          "description": "",
          "name": "AnypointAutocompleteElement",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "return": {
                "type": {
                  "text": "Element"
                }
              }
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "HTMLInputElement | string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "HTMLInputElement | string | undefined"
              },
              "description": "A target input field to observe.\nIt accepts an element which is the input with `value` property or\nan id of an element that is a child of the parent element of this node.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "_suggestions",
              "type": {
                "text": "string[] | InternalSuggestion[]"
              },
              "default": "[]",
              "description": "List of suggestion that are rendered."
            },
            {
              "kind": "field",
              "name": "suggestions",
              "type": {
                "text": "string[] | InternalSuggestion[] | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "attribute": "suggestions"
            },
            {
              "kind": "field",
              "name": "__loading",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_loading",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "True when user query changed and waiting for `source` property update"
            },
            {
              "kind": "field",
              "name": "_source",
              "type": {
                "text": "string[] | Suggestion[] | undefined"
              }
            },
            {
              "kind": "field",
              "name": "[suggestionsValue]",
              "type": {
                "text": "InternalSuggestion[] | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "string[] | Suggestion[] | undefined"
              },
              "description": "List of suggestions to render.\nIf the array items are strings they will be used to render a suggestions and\nto insert a value.\nIf the list is an object the each object must contain `value` and `display`\nproperties.\nThe `display` property will be used in the suggestions list and the\n`value` property will be used to insert the value to the referenced text field.",
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "[openedValuePrivate]",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "[openedValue]",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "loader",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set this to true if you use async operation in response for query event.\nThis will render a loader when querying for more suggestions.\nDo not use it it you do not handle suggestions asynchronously.",
              "attribute": "loader",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "openOnFocus",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true it will opened suggestions on input field focus.",
              "attribute": "openOnFocus",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it ignores any events on the input field.",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "_isAttached",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isAttached",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign"
              },
              "default": "'top'",
              "description": "The orientation against which to align the element vertically\nrelative to the text input.\nPossible values are \"top\", \"bottom\", \"middle\", \"auto\".",
              "attribute": "verticalAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
              "attribute": "verticalOffset",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'center'",
              "description": "The orientation against which to align the element horizontally\nrelative to the text input. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
              "attribute": "horizontalAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
              "attribute": "horizontalOffset",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrollAction",
              "type": {
                "text": "string"
              },
              "default": "'refit'",
              "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
              "attribute": "scrollAction",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Removes animation from the dropdown.",
              "attribute": "noAnimations",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noTargetControls",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it won't setup `aria-controls` on target element.",
              "attribute": "noTargetControls",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noTargetValueUpdate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set the element won't update the `value` property on the\ntarget when a selection is made.",
              "attribute": "noTargetValueUpdate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fitPositionTarget",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it fits the positioning target width.",
              "attribute": "fitPositionTarget"
            },
            {
              "kind": "field",
              "name": "positionTarget",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "When set to an element it will be used to position the dropdown \ninstead of the input element",
              "attribute": "positionTarget"
            },
            {
              "kind": "field",
              "name": "ignoreDropdownStyling",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "The component sets CSS variables on the dropdown element by default.\nWhen this property is set then the component ignores setting these styles, \nbut you have to apply styles to the `anypoint-dropdown` element.\nThe drop down element is not in the shadow DOM so the application has access to it.",
              "attribute": "ignoreDropdownStyling"
            },
            {
              "kind": "field",
              "name": "noOverlap",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Will position the list around the input without overlapping it.",
              "attribute": "noOverlap",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "__listbox",
              "type": {
                "text": "AnypointListboxElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "__ignoreCloseRefocus",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_listbox",
              "type": {
                "text": "AnypointListboxElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "onquery",
              "type": {
                "text": "EventListener | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Registers a callback function for `query` event",
              "parameters": [
                {
                  "description": "A callback to register. Pass `null` or `undefined`\nto clear the listener.",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "field",
              "name": "onselected",
              "type": {
                "text": "EventListener | undefined"
              },
              "return": {
                "type": {
                  "text": "EventListener"
                }
              },
              "description": "Registers a callback function for `selected` event",
              "parameters": [
                {
                  "description": "A callback to register. Pass `null` or `undefined`\nto clear the listener.",
                  "name": "value",
                  "type": {
                    "text": "EventListener"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_oldTarget",
              "type": {
                "text": "HTMLInputElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "[autocompleteFocus]",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "[ignoreNextFocus]",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "_onCaptureClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[processSource]",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Array<string | Suggestion> | undefined | null"
                  },
                  "description": "A list of suggestions to process"
                }
              ],
              "description": "Normalizes suggestions into a single struct."
            },
            {
              "kind": "method",
              "name": "[normalizeSource]",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Suggestion | string"
                  },
                  "description": "A list of suggestions to process"
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The index of the suggestion on the source list."
                }
              ],
              "description": "Normalizes a suggestion"
            },
            {
              "kind": "method",
              "name": "_targetChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for target property change."
            },
            {
              "kind": "method",
              "name": "_setComboboxWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets target input width on the listbox before rendering."
            },
            {
              "kind": "method",
              "name": "_setupTargetAria",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLInputElement"
                  },
                  "description": "An element to set attribute on to"
                }
              ],
              "description": "Setups the relevant aria attributes in the target input."
            },
            {
              "kind": "method",
              "name": "_openedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opened",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets `aria-expanded` on input's parent element."
            },
            {
              "kind": "method",
              "name": "_targetInputHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Renders suggestions on target's `input` event"
            },
            {
              "kind": "method",
              "name": "_targetFocusHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Renders suggestions on target input focus if `openOnFocus` is set."
            },
            {
              "kind": "field",
              "name": "_previousQuery",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "renderSuggestions",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Renders suggestions for current input and opens the overlay if\nthere are suggestions to show."
            },
            {
              "kind": "method",
              "name": "_dispatchQuery",
              "return": {
                "type": {
                  "text": "CustomEvent"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "Current input value."
                }
              ],
              "description": "Dispatches query event and returns it."
            },
            {
              "kind": "method",
              "name": "_filterSuggestions",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Filter `source` array for current value."
            },
            {
              "kind": "method",
              "name": "_listSuggestions",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "InternalSuggestion[]"
                  },
                  "description": "Source suggestions (normalized)"
                },
                {
                  "name": "query",
                  "type": {
                    "text": "string"
                  },
                  "description": "Filter term"
                }
              ],
              "description": "Filters out suggestions"
            },
            {
              "kind": "method",
              "name": "_closeHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "notifyResize",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_selectionHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectSuggestion",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selected",
                  "type": {
                    "text": "number"
                  },
                  "description": "Index of suggestion to use."
                }
              ],
              "description": "Inserts selected suggestion into the text box and closes the suggestions."
            },
            {
              "kind": "method",
              "name": "_refocusTarget",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_targetKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the keydown event."
            },
            {
              "kind": "method",
              "name": "_onDownKey",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "If the dropdown is opened then it focuses on the first element on the list.\nIf closed it opens the suggestions and focuses on the first element on\nthe list."
            },
            {
              "kind": "method",
              "name": "_onUpKey",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "If the dropdown is opened then it focuses on the last element on the list.\nIf closed it opens the suggestions and focuses on the last element on\nthe list."
            },
            {
              "kind": "method",
              "name": "_onEscKey",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Closes the dropdown."
            },
            {
              "kind": "method",
              "name": "_onEnterKey",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Accepts first suggestion from the dropdown when opened."
            },
            {
              "kind": "method",
              "name": "_onTabDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The element refocuses on the input when suggestions closes.\nAlso, the listbox element is focusable so with tab it can be next target.\nFinally, the dropdown has close animation that takes some time to finish\nso it will try to refocus after the animation finish.\nThis function sets flags in debouncer to prohibit this."
            },
            {
              "kind": "method",
              "name": "_inform",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | Suggestion"
                  },
                  "description": "Selected value."
                }
              ],
              "description": "Dispatches `selected` event with new value."
            },
            {
              "kind": "method",
              "name": "_dropdownResizedHandler",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_listboxTemplate",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_loaderTemplate",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_listTemplate",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "[readLabelValue]",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Suggestion"
                  },
                  "description": "A suggestion to render"
                }
              ]
            },
            {
              "kind": "method",
              "name": "[itemTemplate]",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Suggestion"
                  },
                  "description": "A suggestion to render"
                }
              ]
            },
            {
              "kind": "field",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "resize",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "target",
              "type": {
                "text": "HTMLInputElement | string | undefined"
              },
              "description": "A target input field to observe.\nIt accepts an element which is the input with `value` property or\nan id of an element that is a child of the parent element of this node.",
              "fieldName": "target"
            },
            {
              "name": "suggestions",
              "type": {
                "text": "string[] | InternalSuggestion[] | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "fieldName": "suggestions"
            },
            {
              "name": "source",
              "type": {
                "text": "string[] | Suggestion[] | undefined"
              },
              "description": "List of suggestions to render.\nIf the array items are strings they will be used to render a suggestions and\nto insert a value.\nIf the list is an object the each object must contain `value` and `display`\nproperties.\nThe `display` property will be used in the suggestions list and the\n`value` property will be used to insert the value to the referenced text field.",
              "fieldName": "source"
            },
            {
              "name": "loader",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set this to true if you use async operation in response for query event.\nThis will render a loader when querying for more suggestions.\nDo not use it it you do not handle suggestions asynchronously.",
              "fieldName": "loader"
            },
            {
              "name": "openOnFocus",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true it will opened suggestions on input field focus.",
              "fieldName": "openOnFocus"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it ignores any events on the input field.",
              "fieldName": "disabled"
            },
            {
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign"
              },
              "default": "'top'",
              "description": "The orientation against which to align the element vertically\nrelative to the text input.\nPossible values are \"top\", \"bottom\", \"middle\", \"auto\".",
              "fieldName": "verticalAlign"
            },
            {
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
              "fieldName": "verticalOffset"
            },
            {
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'center'",
              "description": "The orientation against which to align the element horizontally\nrelative to the text input. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
              "fieldName": "horizontalAlign"
            },
            {
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
              "fieldName": "horizontalOffset"
            },
            {
              "name": "scrollAction",
              "type": {
                "text": "string"
              },
              "default": "'refit'",
              "description": "Determines which action to perform when scroll outside an opened overlay\nhappens. Possible values: lock - blocks scrolling from happening, refit -\ncomputes the new position on the overlay cancel - causes the overlay to\nclose",
              "fieldName": "scrollAction"
            },
            {
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Removes animation from the dropdown.",
              "fieldName": "noAnimations"
            },
            {
              "name": "noTargetControls",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it won't setup `aria-controls` on target element.",
              "fieldName": "noTargetControls"
            },
            {
              "name": "noTargetValueUpdate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set the element won't update the `value` property on the\ntarget when a selection is made.",
              "fieldName": "noTargetValueUpdate"
            },
            {
              "name": "fitPositionTarget",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it fits the positioning target width.",
              "fieldName": "fitPositionTarget"
            },
            {
              "name": "positionTarget",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "When set to an element it will be used to position the dropdown \ninstead of the input element",
              "fieldName": "positionTarget"
            },
            {
              "name": "ignoreDropdownStyling",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "The component sets CSS variables on the dropdown element by default.\nWhen this property is set then the component ignores setting these styles, \nbut you have to apply styles to the `anypoint-dropdown` element.\nThe drop down element is not in the shadow DOM so the application has access to it.",
              "fieldName": "ignoreDropdownStyling"
            },
            {
              "name": "noOverlap",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Will position the list around the input without overlapping it.",
              "fieldName": "noOverlap"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "suggestionsValue",
          "declaration": {
            "name": "suggestionsValue",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "processSource",
          "declaration": {
            "name": "processSource",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "normalizeSource",
          "declaration": {
            "name": "normalizeSource",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "itemTemplate",
          "declaration": {
            "name": "itemTemplate",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "readLabelValue",
          "declaration": {
            "name": "readLabelValue",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "openedValue",
          "declaration": {
            "name": "openedValue",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "openedValuePrivate",
          "declaration": {
            "name": "openedValuePrivate",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "autocompleteFocus",
          "declaration": {
            "name": "autocompleteFocus",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "ignoreNextFocus",
          "declaration": {
            "name": "ignoreNextFocus",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointAutocompleteElement",
            "module": "src/elements/AnypointAutocompleteElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointButtonBase.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A base class for Anypoint buttons.",
          "name": "AnypointButtonBase",
          "members": [
            {
              "kind": "field",
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "attribute": "elevation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "attribute": "noink",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "privacy": "private",
              "default": "'low'"
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "attribute": "emphasis",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_toggles",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "toggles",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "method",
              "name": "_calculateElevation",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Computes current elevation for the material design.\nThe `emphasis` property is set when the updates are committed."
            },
            {
              "kind": "method",
              "name": "_changedControlState",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_buttonStateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_transitionEndHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TransitionEvent"
                  }
                }
              ],
              "description": "Redirects the `transitionend` from the `material-ripple` element.\nThis is the only way to perform an action when the animation ends instead of counting on `click`.\nNote, when anypoint is enabled this event is not dispatched."
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "transitionend",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "fieldName": "elevation"
            },
            {
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "fieldName": "noink"
            },
            {
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "fieldName": "emphasis"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            },
            {
              "name": "ButtonStateMixin",
              "module": "/src/mixins/ButtonStateMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnypointButtonBase",
          "declaration": {
            "name": "AnypointButtonBase",
            "module": "src/elements/AnypointButtonBase.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointButtonElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-button`\nAnypoint styled button.",
          "name": "AnypointButtonElement",
          "members": [
            {
              "kind": "field",
              "name": "_ripple",
              "type": {
                "text": "MaterialRippleElement"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_spaceKeyDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_spaceKeyUpHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "attribute": "elevation",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "attribute": "noink",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "privacy": "private",
              "default": "'low'",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "attribute": "emphasis",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_calculateElevation",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Computes current elevation for the material design.\nThe `emphasis` property is set when the updates are committed.",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_changedControlState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_buttonStateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_transitionEndHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TransitionEvent"
                  }
                }
              ],
              "description": "Redirects the `transitionend` from the `material-ripple` element.\nThis is the only way to perform an action when the animation ends instead of counting on `click`.\nNote, when anypoint is enabled this event is not dispatched.",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnypointButtonBase",
            "module": "/src/elements/AnypointButtonBase.js"
          },
          "attributes": [
            {
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "fieldName": "elevation",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "fieldName": "noink",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "fieldName": "emphasis",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "transitionend",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointButtonElement",
            "module": "src/elements/AnypointButtonElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointCheckboxElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-checkbox`\nAnypoint styled checkbox\n\n`<anypoint-checkbox>` is a button that can be either checked or unchecked.\nUser can tap the checkbox to check or uncheck it.  Usually you use checkboxes\nto allow user to select multiple options from a set.\nAvoid using a single checkbox as an option selector and use toggle button instead.",
          "name": "AnypointCheckboxElement",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "onchange",
              "type": {
                "text": "EventListener"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "An event listener for the `change` event or null to unregister",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "field",
              "name": "ariaActiveAttribute",
              "type": {
                "text": "string"
              },
              "default": "'aria-checked'",
              "attribute": "ariaActiveAttribute"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formDisabled",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "formDisabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_computeCheckboxClass",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "checked",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "invalid",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_computeCheckmarkClass",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "checked",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "indeterminate",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_buttonStateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Synchronizes the element's `active` and `checked` state."
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_spaceKeyDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "formState",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "ariaActiveAttribute",
              "type": {
                "text": "string"
              },
              "default": "'aria-checked'",
              "fieldName": "ariaActiveAttribute"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "indeterminate"
            },
            {
              "name": "formDisabled",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "formDisabled"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ButtonStateMixin",
              "module": "/src/mixins/ButtonStateMixin.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            },
            {
              "name": "CheckedElementMixin",
              "module": "/src/mixins/CheckedElementMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointCheckboxElement",
            "module": "src/elements/AnypointCheckboxElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointChipElement.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hasIconNodeValue"
        },
        {
          "kind": "class",
          "description": "`anypoint-chip`\n\nA compact material design element that represent and input, attribute, or action.\n\nA chip contains a label and optionally an icon and remove icon.\n\nRemove icon is predefined. However icon can be any HTML element with\n`slot=\"icon\"` attribute. Per material design guidelines the icon is rounded.\n\n## Example\n\n```html\n<anypoint-chip removable>\n <img src=\"...\" slot=\"icon\"/>\n Biking\n</anypoint-chip>\n```\n\nThe \"Biking\" is the label rendered next to the icon. The chip also renders\nbuilt-in remove icon. Clicking on the icon dispatches `chipremoved`\ncustom event only. It does not remove the chip from the document as the\napplication logic might use different ways of removing elements from dom\nthan web platform APIs.",
          "name": "AnypointChipElement",
          "members": [
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If set the chip can be removed.\nThe element does not remove itself from the DOM. It rather dispatch\n`chipremoved` custom event to inform parent element about the action.",
              "attribute": "removable"
            },
            {
              "kind": "field",
              "name": "toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the button toggles the active state with each click or press\nof the space bar or enter.",
              "attribute": "toggles",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "__disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "__active",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "__focused",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "[hasIconNodeValue]",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the user cannot interact with this element.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_focused",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_removeIcon",
              "type": {
                "text": "SVGTemplateResult | undefined"
              }
            },
            {
              "kind": "field",
              "name": "removeIcon",
              "type": {
                "text": "SVGTemplateResult"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "An icon to be used to render \"remove\" icon.\nIt must be an instance of `SVGTemplateResult` that can be created from `lit-html`\nlibrary.\n\n```javascript\nimport { svg } from 'lit-html';\nconst icon = svg`...`; // content of the icon.\n```",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_iconSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "__firstUpdated",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_addSlotEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds the `slotchange` event listener to the icon slot."
            },
            {
              "kind": "method",
              "name": "_removeHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handler for remove icon click event.\nCancels the event and calls `remove()`"
            },
            {
              "kind": "method",
              "name": "remove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Dispatches `chip-remove` custom event to inform application\nthat the user requested to remove the item.\n\nNote, this does not check if `removable` is set"
            },
            {
              "kind": "method",
              "name": "_detectHasIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "According to material design spec, when there's no icon the\nleft hand side padding should be 12dp. Slotted styling API does now\nallow to detect when there's no content so it has to be done using\nnode observer."
            },
            {
              "kind": "method",
              "name": "_keyDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for key down when element is focused.\nRemoves the item when delete key is pressed."
            },
            {
              "kind": "method",
              "name": "_focusBlurHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "Either focus or blur events"
                }
              ],
              "description": "Sets state of the `focused` property depending on the event handled by this\nlistener."
            },
            {
              "kind": "field",
              "name": "_oldTabIndex",
              "type": {
                "text": "string | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_disabledChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Current value of `disabled` property."
                }
              ],
              "description": "Called when the value of `disabled` property change. Sets `aria-disabled`\nand `tabIndex` attributes."
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles click event (as well as Space and Enter key down) as sets the\n`active` property."
            },
            {
              "kind": "method",
              "name": "_userActivate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "active",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The value to set."
                }
              ],
              "description": "Sets `_active` property depending on the input and current state of `_active`."
            },
            {
              "kind": "method",
              "name": "_asyncClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calls `click()` function on this element so event listeners can handle\nthe action."
            },
            {
              "kind": "method",
              "name": "__activeChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "active",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Current state of `active`./"
                }
              ],
              "description": "Called when the `active` value change.\nIt sets `active` attribute and, if the button toggles, `aria-pressed` attribute."
            },
            {
              "kind": "method",
              "name": "_iconSlotTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_removeTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | string"
                }
              }
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "chipremoved",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "removable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If set the chip can be removed.\nThe element does not remove itself from the DOM. It rather dispatch\n`chipremoved` custom event to inform parent element about the action.",
              "fieldName": "removable"
            },
            {
              "name": "toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the button toggles the active state with each click or press\nof the space bar or enter.",
              "fieldName": "toggles"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the user cannot interact with this element.",
              "fieldName": "disabled"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hasIconNodeValue",
          "declaration": {
            "name": "hasIconNodeValue",
            "module": "src/elements/AnypointChipElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointChipElement",
            "module": "src/elements/AnypointChipElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointChipInputElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointChipInputElement",
          "members": [
            {
              "kind": "field",
              "name": "allowed",
              "type": {
                "text": "string[] | undefined"
              },
              "default": "[]",
              "description": "List of allowed chips labels. Character case does not matter.",
              "attribute": "allowed"
            },
            {
              "kind": "field",
              "name": "_chips",
              "type": {
                "text": "ChipItem[] | undefined"
              }
            },
            {
              "kind": "field",
              "name": "chips",
              "type": {
                "text": "ChipItem[] | undefined"
              },
              "description": "A list of chip items to render",
              "parameters": [
                {
                  "description": "Each array item must have `label` property\nfor the chip. It can contain `removable` property it the chip can\nbe removed. It is added by default when chip's source is user input.",
                  "name": "value"
                }
              ],
              "attribute": "chips"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "_source",
              "type": {
                "text": "ChipSuggestion[] | string[] | undefined"
              }
            },
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "ChipSuggestion[] | string[] | undefined"
              },
              "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain an `icon` property\nwhich value is an instance of `SVGTemplateResult` from `lit-html`\nlibrary.\n\nIf the suggestion item contains `id` property it's value will be returned\nas a value of the input. Otherwise `value` is used.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": svg`...`\n },\n {\n   \"value\": \"Rendered label\",\n   \"id\": \"returned-value\"\n }\n]\n```",
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "chipsValue",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "onchipschanged",
              "type": {
                "text": "EventListener | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Registers a callback function for `chipschange` event",
              "parameters": [
                {
                  "description": "A callback to register. Pass `null` or `undefined`\nto clear the listener.",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_chipRemoveIcon",
              "type": {
                "text": "SVGTemplateResult | undefined"
              }
            },
            {
              "kind": "field",
              "name": "chipRemoveIcon",
              "type": {
                "text": "SVGTemplateResult | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "An icon to be used to render \"remove\" icon.\nIt must be an instance of `SVGTemplateResult` that can be created from `lit-html`\nlibrary.\n\n```javascript\nimport { svg } from 'lit-html';\nconst icon = svg`...`; // content of the icon.\n```",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_computeChipRemovable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "ChipItem"
                  },
                  "description": "`chips` list item."
                }
              ],
              "description": "Computes value for paper-chip's `removable` property."
            },
            {
              "kind": "method",
              "name": "addChip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "label",
                  "type": {
                    "text": "string"
                  },
                  "description": "Label of the chip"
                },
                {
                  "name": "removable",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "True if the chip can be removed."
                },
                {
                  "name": "icon",
                  "optional": true,
                  "type": {
                    "text": "SVGTemplateResult"
                  },
                  "description": "An icon to pass to the chip."
                },
                {
                  "name": "id",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "An ID to be used as a value."
                }
              ],
              "description": "Adds a new chip to the list of chips."
            },
            {
              "kind": "method",
              "name": "_computeChipsValues",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "List of chips definitions"
                },
                {
                  "name": "source",
                  "default": "[]",
                  "type": {
                    "text": "string[] | ChipSuggestion[]"
                  },
                  "description": "List of suggestions"
                }
              ],
              "description": "Restores chips from passed value.\nWhen input's (this element) value change it computes list of chips"
            },
            {
              "kind": "method",
              "name": "_findSource",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "string[] | ChipSuggestion[]"
                  },
                  "description": "List of suggestions passed to the element"
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "Search value. Should be lower case before calling this function"
                },
                {
                  "name": "id",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Optional ID to compare."
                }
              ],
              "description": "Finds a suggestion source in the list of suggestions.\nPrimarily it looks for a value (and lowercase it) and then it compares\n`id` if defined."
            },
            {
              "kind": "method",
              "name": "_isAllowed",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The value to test"
                },
                {
                  "name": "id",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The Suggestion id, if any."
                }
              ],
              "description": "Tests if given value is allowed to enter when `allowed` property is set."
            },
            {
              "kind": "method",
              "name": "_removeChip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "Index of the chip in the `chips` array"
                }
              ],
              "description": "Removes a chip on a specific index."
            },
            {
              "kind": "method",
              "name": "_getValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Validates the input element and sets an error style if needed."
            },
            {
              "kind": "method",
              "name": "_chipRemovedHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Handler for `chipremoved` event."
            },
            {
              "kind": "method",
              "name": "_keydownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_enterDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_backspaceDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectedHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_processAddInput",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_focusBlurHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_tryBlurHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When autocomplete is enabled, the user type in a value and as a result the\nautocomplete closes itself for a lack of suggestion the input looses focus\nfor a tick. This checks in a debouncer whether the input still has focus and\nif not it commits the value to the chip model."
            },
            {
              "kind": "method",
              "name": "_prefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_autocompleteTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | string"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderChipsTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult[] | string"
                }
              }
            },
            {
              "kind": "method",
              "name": "_itemIconTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "ChipItem"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_prefixed",
              "type": {
                "text": "HTMLSlotElement"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_infoAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_errorAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_inputType",
              "type": {
                "text": "SupportedInputTypes"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "bindValue",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_retargetEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event to retarget"
                }
              ],
              "description": "Re-targets an event that does not bubble",
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_suffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_assistiveTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_inputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "allowed",
              "type": {
                "text": "string[] | undefined"
              },
              "default": "[]",
              "description": "List of allowed chips labels. Character case does not matter.",
              "fieldName": "allowed"
            },
            {
              "name": "chips",
              "type": {
                "text": "ChipItem[] | undefined"
              },
              "description": "A list of chip items to render",
              "parameters": [
                {
                  "description": "Each array item must have `label` property\nfor the chip. It can contain `removable` property it the chip can\nbe removed. It is added by default when chip's source is user input.",
                  "name": "value"
                }
              ],
              "fieldName": "chips"
            },
            {
              "name": "source",
              "type": {
                "text": "ChipSuggestion[] | string[] | undefined"
              },
              "description": "List of suggestions to render when the user type in the input field.\n\nEach array item can be a string which will be compared to user input.\nIf the item is an object is must contain the `value` property which\nis used to compare the values. It can also contain an `icon` property\nwhich value is an instance of `SVGTemplateResult` from `lit-html`\nlibrary.\n\nIf the suggestion item contains `id` property it's value will be returned\nas a value of the input. Otherwise `value` is used.\n\n### Example\n\n```json\n[\n \"item 1\",\n {\n   \"value\": \"Other item\",\n   \"icon\": svg`...`\n },\n {\n   \"value\": \"Rendered label\",\n   \"id\": \"returned-value\"\n }\n]\n```",
              "fieldName": "source"
            }
          ],
          "superclass": {
            "name": "AnypointInputElement",
            "module": "/src/elements/AnypointInputElement.js"
          },
          "events": [
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointChipInputElement",
            "module": "src/elements/AnypointChipInputElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointCollapseElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointCollapseElement",
          "members": [
            {
              "kind": "field",
              "name": "noAnimation",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set noAnimation to true to disable animations.",
              "default": "false",
              "attribute": "noAnimation"
            },
            {
              "kind": "field",
              "name": "_horizontal",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_opened",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "[transitioningValue]",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "[desiredSize]",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Stores the desired size of the collapse body."
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the collapse horizontally when true and vertically otherwise",
              "default": "false",
              "attribute": "horizontal"
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set opened to true to show the collapse element and to false to hide it.",
              "default": "false",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "transitioning",
              "type": {
                "text": "boolean | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "[transitioning]",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "[dimension]",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "[dimensionMax]",
              "type": {
                "text": "string"
              },
              "description": "`maxWidth` or `maxHeight`.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "[dimensionMaxCss]",
              "type": {
                "text": "string"
              },
              "description": "`max-width` or `max-height`.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "[isAttached]",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the opened state."
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Opens the collapsable"
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Closes the collapsable"
            },
            {
              "kind": "method",
              "name": "[updateSize]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "type": {
                    "text": "string"
                  },
                  "description": "The new value for `maxWidth`/`maxHeight` as css property value, usually `auto` or `0px`."
                },
                {
                  "name": "animated",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if `true` updates the size with an animation, otherwise without."
                }
              ],
              "description": "Updates the size of the element."
            },
            {
              "kind": "method",
              "name": "[updateTransition]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "enabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[calcSize]",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Calculates the size of the element when opened."
            },
            {
              "kind": "method",
              "name": "[transitionEnd]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "[transitionEndHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[openedChanged]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "[toggleAttribute]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute to toggle"
                },
                {
                  "name": "add",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Whether the attribute should be added or removed."
                }
              ],
              "description": "Toggles attribute on the element"
            },
            {
              "kind": "method",
              "name": "[horizontalChanged]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field"
            }
          ],
          "events": [
            {
              "name": "openedchange",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "noAnimation",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set noAnimation to true to disable animations.",
              "default": "false",
              "fieldName": "noAnimation"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the collapse horizontally when true and vertically otherwise",
              "default": "false",
              "fieldName": "horizontal"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set opened to true to show the collapse element and to false to hide it.",
              "default": "false",
              "fieldName": "opened"
            }
          ],
          "mixins": [
            {
              "name": "ResizableMixin",
              "module": "/src/mixins/ResizableMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointCollapseElement",
            "module": "src/elements/AnypointCollapseElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointComboboxElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-combobox`",
          "name": "AnypointComboboxElement",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "Suggestion[] | string[] | undefined"
              },
              "description": "List of suggestions to render.\nIf the array items are strings they will be used for display a suggestions and\nto insert a value.\nIf the list is an object the each object must contain `value` and `display`\nproperties.\nThe `display` property will be used in the suggestions list and the\n`value` property will be used to insert the value to the referenced text field.",
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "_prefixed",
              "type": {
                "text": "HTMLSlotElement"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_infoAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_errorAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_inputType",
              "type": {
                "text": "SupportedInputTypes"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "bindValue",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_retargetEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event to retarget"
                }
              ],
              "description": "Re-targets an event that does not bubble",
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_suffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_prefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_assistiveTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_inputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "Suggestion[] | string[] | undefined"
              },
              "description": "List of suggestions to render.\nIf the array items are strings they will be used for display a suggestions and\nto insert a value.\nIf the list is an object the each object must contain `value` and `display`\nproperties.\nThe `display` property will be used in the suggestions list and the\n`value` property will be used to insert the value to the referenced text field.",
              "fieldName": "source"
            }
          ],
          "superclass": {
            "name": "AnypointInputElement",
            "module": "/src/elements/AnypointInputElement.js"
          },
          "events": [
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointComboboxElement",
            "module": "src/elements/AnypointComboboxElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointDialogElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointDialogElement",
          "members": [
            {
              "kind": "field",
              "name": "_modal",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If `modal` is true, this implies `noCancelOnOutsideClick`,\n`noCancelOnEscKey` and `withBackdrop`.",
              "attribute": "modal"
            },
            {
              "kind": "field",
              "name": "__ready",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dialog. Pass an Array for multiple animations.",
              "attribute": "openAnimationConfig"
            },
            {
              "kind": "field",
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dialog. Pass an Array for multiple animations.",
              "attribute": "closeAnimationConfig"
            },
            {
              "kind": "field",
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndialog.",
              "attribute": "noAnimations"
            },
            {
              "kind": "method",
              "name": "_updateClosingReasonConfirmed",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "confirmed",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_isTargetClosingReason",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "description": "Checks if the click target is the dialog closing target"
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_resizeHandler",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for the resize event dispatched by the children. \nCauses the content to resize."
            },
            {
              "kind": "field",
              "name": "_modelPrevConf",
              "type": {
                "text": "IModelPreviousConfiguration | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_modalChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "modal",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_openedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opened",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderOpened",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderClosed",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onAnimationFinish",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Called when animation finishes on the dialog (when opening or\nclosing). Responsible for \"completing\" the process of opening or\nclosing the dialog by positioning it or setting its display to\nnone."
            },
            {
              "kind": "field",
              "name": "_activeAnimations",
              "type": {
                "text": "Animation[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "playAnimation",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cancelAnimation",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_configureStartAnimation",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Animation[] | undefined"
                }
              },
              "parameters": [
                {
                  "name": "config",
                  "default": "DefaultListOpenAnimation",
                  "type": {
                    "text": "IAnimationConfig[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_configureEndAnimation",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Animation[] | undefined"
                }
              },
              "parameters": [
                {
                  "name": "config",
                  "default": "DefaultListCloseAnimation",
                  "type": {
                    "text": "IAnimationConfig[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_runEffects",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Animation[]"
                }
              },
              "parameters": [
                {
                  "name": "config",
                  "type": {
                    "text": "IAnimationConfig[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__runAnimation",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "IAnimationConfig"
                  }
                },
                {
                  "name": "results",
                  "type": {
                    "text": "Animation[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "modal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If `modal` is true, this implies `noCancelOnOutsideClick`,\n`noCancelOnEscKey` and `withBackdrop`.",
              "fieldName": "modal"
            },
            {
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dialog. Pass an Array for multiple animations.",
              "fieldName": "openAnimationConfig"
            },
            {
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dialog. Pass an Array for multiple animations.",
              "fieldName": "closeAnimationConfig"
            },
            {
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndialog.",
              "fieldName": "noAnimations"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "OverlayMixin",
              "module": "/src/mixins/OverlayMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointDialogElement",
            "module": "src/elements/AnypointDialogElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointDialogScrollableElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointDialogScrollableElement",
          "members": [
            {
              "kind": "field",
              "name": "dialogElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "Parent element to this element.",
              "attribute": "dialogElement"
            },
            {
              "kind": "field",
              "name": "scrollTarget",
              "type": {
                "text": "HTMLElement"
              },
              "description": "Returns the scrolling element."
            },
            {
              "kind": "method",
              "name": "_ensureTarget",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateScrollState",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleClass",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "styles",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "add",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "dialogElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "Parent element to this element.",
              "fieldName": "dialogElement"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointDialogScrollableElement",
            "module": "src/elements/AnypointDialogScrollableElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointDropdownElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "<!-- Retargeted from the content -->",
          "name": "AnypointDropdownElement",
          "members": [
            {
              "kind": "field",
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.",
              "attribute": "openAnimationConfig"
            },
            {
              "kind": "field",
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.",
              "attribute": "closeAnimationConfig"
            },
            {
              "kind": "field",
              "name": "focusTarget",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "If provided, this will be the element that will be focused when\nthe dropdown opens.",
              "attribute": "focusTarget"
            },
            {
              "kind": "field",
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "attribute": "noAnimations"
            },
            {
              "kind": "field",
              "name": "_allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_positionTarget",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_verticalAlign",
              "type": {
                "text": "VerticalAlign | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_horizontalAlign",
              "type": {
                "text": "HorizontalAlign | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_verticalOffset",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_horizontalOffset",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\nThis property is a shortcut to set `scrollAction` to lock or refit.\nPrefer directly setting the `scrollAction` property.",
              "default": "false",
              "attribute": "allowOutsideScroll"
            },
            {
              "kind": "field",
              "name": "positionTarget",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "attribute": "positionTarget"
            },
            {
              "kind": "field",
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign | undefined"
              },
              "default": "'top'",
              "attribute": "verticalAlign"
            },
            {
              "kind": "field",
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign | undefined"
              },
              "default": "'left'",
              "attribute": "horizontalAlign"
            },
            {
              "kind": "field",
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "attribute": "verticalOffset"
            },
            {
              "kind": "field",
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "attribute": "horizontalOffset"
            },
            {
              "kind": "field",
              "name": "containedElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "The element that is contained by the dropdown, if any."
            },
            {
              "kind": "field",
              "name": "contentWrapper",
              "type": {
                "text": "HTMLElement | null"
              }
            },
            {
              "kind": "field",
              "name": "_readied",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_activeAnimations",
              "type": {
                "text": "Animation[] | undefined"
              }
            },
            {
              "kind": "method",
              "name": "_updateOverlayPosition",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_openedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opened",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderOpened",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderClosed",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onAnimationFinish",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Called when animation finishes on the dropdown (when opening or\nclosing). Responsible for \"completing\" the process of opening or\nclosing the dropdown by positioning it or setting its display to\nnone."
            },
            {
              "kind": "method",
              "name": "_allowOutsideScrollChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "allowOutsideScroll",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets scrollAction according to the value of allowOutsideScroll.\nPrefer setting directly scrollAction."
            },
            {
              "kind": "method",
              "name": "_applyFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "playAnimation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cancelAnimation",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_runEffects",
              "return": {
                "type": {
                  "text": "Animation[]"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "config",
                  "type": {
                    "text": "IAnimationConfig[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__runAnimation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "IAnimationConfig"
                  }
                },
                {
                  "name": "results",
                  "type": {
                    "text": "Animation[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_configureStartAnimation",
              "return": {
                "type": {
                  "text": "Animation[] | null"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "config",
                  "default": "DefaultListOpenAnimation",
                  "type": {
                    "text": "IAnimationConfig[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_configureEndAnimation",
              "return": {
                "type": {
                  "text": "Animation[] | null"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "config",
                  "default": "DefaultListCloseAnimation",
                  "type": {
                    "text": "IAnimationConfig[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setPrefixedProperty",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "closed"
            },
            {
              "name": "opened"
            },
            {
              "name": "deselect"
            },
            {
              "name": "select"
            }
          ],
          "attributes": [
            {
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.",
              "fieldName": "openAnimationConfig"
            },
            {
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.",
              "fieldName": "closeAnimationConfig"
            },
            {
              "name": "focusTarget",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "If provided, this will be the element that will be focused when\nthe dropdown opens.",
              "fieldName": "focusTarget"
            },
            {
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "fieldName": "noAnimations"
            },
            {
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\nThis property is a shortcut to set `scrollAction` to lock or refit.\nPrefer directly setting the `scrollAction` property.",
              "default": "false",
              "fieldName": "allowOutsideScroll"
            },
            {
              "name": "positionTarget",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "fieldName": "positionTarget"
            },
            {
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign | undefined"
              },
              "default": "'top'",
              "fieldName": "verticalAlign"
            },
            {
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign | undefined"
              },
              "default": "'left'",
              "fieldName": "horizontalAlign"
            },
            {
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "fieldName": "verticalOffset"
            },
            {
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "fieldName": "horizontalOffset"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "OverlayMixin",
              "module": "/src/mixins/OverlayMixin.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointDropdownElement",
            "module": "src/elements/AnypointDropdownElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointDropdownMenuElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Accessible dropdown menu for Anypoint platform.\n\nThe element works perfectly with `anypoint-listbox` which together creates an\naccessible list of options. The listbox can be replaced by any other element\nthat support similar functionality but make sure it has an appropriate aria\nsupport.\n\nSee README.md file for detailed documentation.",
          "name": "AnypointDropdownMenuElement",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "description": "For form-associated custom elements. Marks this custom element\nas form enabled element."
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | undefined"
              },
              "description": "When form-associated custom elements are supported in the browser it\nreturns `<form>` element associated with this control."
            },
            {
              "kind": "field",
              "name": "hasValidationMessage",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_hasValidationMessage",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Value computed from `invalidMessage`, `invalid` and `validationStates`.\nTrue if the validation message should be displayed."
            },
            {
              "kind": "field",
              "name": "_autoValidate",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "autoValidate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically calls `validate()` function when dropdown closes.",
              "attribute": "autoValidate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_invalidMessage",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "invalidMessage",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the input is invalid.",
              "attribute": "invalidMessage"
            },
            {
              "kind": "field",
              "name": "_labelClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_infoAddonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_errorAddonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_triggerClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_inputContainerClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "__selectedItem",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_selectedItem",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_opened",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "description": "True if the list is currently displayed.",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contentElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Selected item value calculated as it's (in order) label property, label\nattribute, and `innerText` value.",
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "When set the control is rendered as disabled form control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "attribute": "openAnimationConfig"
            },
            {
              "kind": "field",
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "attribute": "closeAnimationConfig"
            },
            {
              "kind": "field",
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "attribute": "noAnimations"
            },
            {
              "kind": "field",
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\nThis property is a shortcut to set `scrollAction` to lock or refit.\nPrefer directly setting the `scrollAction` property.",
              "attribute": "allowOutsideScroll",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign"
              },
              "default": "'top'",
              "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
              "attribute": "verticalAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'left'",
              "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
              "attribute": "horizontalAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
              "attribute": "verticalOffset",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
              "attribute": "horizontalOffset",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dynamicAlign",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
              "attribute": "dynamicAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the form control.\nNote, form-associated custom elements may not be supported as first\nimplementation was released in Chrome M77 in July 2019. It may require\nusing custom form element to gather form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it marks the element as required. Calling the `validate`\nfunction will mark this control as invalid when no value is selected.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "infoMessage",
              "type": {
                "text": "string | undefined"
              },
              "description": "Assistive text value.\nRendered below the input.",
              "attribute": "infoMessage"
            },
            {
              "kind": "field",
              "name": "noOverlap",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Will position the list around the button without overlapping it.",
              "attribute": "noOverlap",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noLabelFloat",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set the label is rendered only when not selected state.\nIt is useful when using the dropdown in an application menu bar.",
              "attribute": "noLabelFloat",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fitPositionTarget",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Fits the dropdown content width to the dropdown selector. Default to `false`.",
              "attribute": "fitPositionTarget"
            },
            {
              "kind": "field",
              "name": "restoreFocusOnClose",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "restoreFocusOnClose"
            },
            {
              "kind": "field",
              "name": "_formDisabled",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_validationStatesHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Form disabled state"
                }
              ],
              "description": "When form-associated custom elements are supported in the browser it\nis called when for disabled state changed."
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "When form-associated custom elements are supported in the browser it\nis called when the form has been reset"
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "formState",
                  "type": {
                    "text": "string"
                  },
                  "description": "Restored value"
                }
              ],
              "description": "When form-associated custom elements are supported in the browser it\nis called when the form state has been restored"
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handler for `click` event.\nOpens the list of the click originated from the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_focusContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses on the listbox, if available."
            },
            {
              "kind": "method",
              "name": "_focusHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for the `focus` event.\nFocuses on the listbox when opened."
            },
            {
              "kind": "method",
              "name": "_onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the keydown event."
            },
            {
              "kind": "method",
              "name": "_onDownKey",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for ArrowDown button press.\nOpens the list if it's not open and focuses on the list otherwise.\n\nThe event should be cancelled or it may cause unwanted behavior."
            },
            {
              "kind": "method",
              "name": "_onUpKey",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for ArrowUp button press.\nOpens the list if it's not open and focuses on the list otherwise.\n\nThe event should be cancelled or it may cause unwanted behavior."
            },
            {
              "kind": "method",
              "name": "_onEscKey",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for Escape button press.\nCloses the list if it's open."
            },
            {
              "kind": "method",
              "name": "_selectedItemChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selectedItem",
                  "optional": true,
                  "type": {
                    "text": "Element | null"
                  },
                  "description": "A selected Element item, with an\noptional `label` property."
                }
              ],
              "description": "Compute the label for the dropdown given a selected item."
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "optional": true,
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "When set it cancels the event"
                }
              ],
              "description": "Toggles `opened` state."
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Show the dropdown content."
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hide the dropdown content."
            },
            {
              "kind": "method",
              "name": "_dropdownClosed",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateNativeValidationState",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_dropdownOpened",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_selectHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_deselectHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns false if the element is required and does not have a selection,\nand true otherwise."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_validationStatesChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "states",
                  "type": {
                    "text": "ValidationResult[] | undefined"
                  }
                }
              ],
              "description": "Called when validation states changed.\nValidation states are set by validatable mixin and is a result of calling\na custom validator. Each validator returns an object with `valid` and `message`\nproperties.\n\nSee `ValidatableMixin` for more information."
            },
            {
              "kind": "method",
              "name": "_autoValidateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Calls when `autoValidate` changed"
            },
            {
              "kind": "method",
              "name": "_invalidChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Current invalid sate"
                }
              ],
              "description": "From `ValidatableMixin`"
            },
            {
              "kind": "method",
              "name": "_ensureInvalidAlertSate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "invalid",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autoValidate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Automatically calls `validate()` function when dropdown closes.",
              "fieldName": "autoValidate"
            },
            {
              "name": "invalidMessage",
              "type": {
                "text": "string | undefined"
              },
              "description": "The error message to display when the input is invalid.",
              "fieldName": "invalidMessage"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "description": "True if the list is currently displayed.",
              "fieldName": "opened"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Selected item value calculated as it's (in order) label property, label\nattribute, and `innerText` value.",
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "When set the control is rendered as disabled form control.",
              "fieldName": "disabled"
            },
            {
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "fieldName": "openAnimationConfig"
            },
            {
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "fieldName": "closeAnimationConfig"
            },
            {
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "fieldName": "noAnimations"
            },
            {
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\nThis property is a shortcut to set `scrollAction` to lock or refit.\nPrefer directly setting the `scrollAction` property.",
              "fieldName": "allowOutsideScroll"
            },
            {
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign"
              },
              "default": "'top'",
              "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
              "fieldName": "verticalAlign"
            },
            {
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'left'",
              "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
              "fieldName": "horizontalAlign"
            },
            {
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
              "fieldName": "verticalOffset"
            },
            {
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
              "fieldName": "horizontalOffset"
            },
            {
              "name": "dynamicAlign",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
              "fieldName": "dynamicAlign"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "Name of the form control.\nNote, form-associated custom elements may not be supported as first\nimplementation was released in Chrome M77 in July 2019. It may require\nusing custom form element to gather form data.",
              "fieldName": "name"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set it marks the element as required. Calling the `validate`\nfunction will mark this control as invalid when no value is selected.",
              "fieldName": "required"
            },
            {
              "name": "infoMessage",
              "type": {
                "text": "string | undefined"
              },
              "description": "Assistive text value.\nRendered below the input.",
              "fieldName": "infoMessage"
            },
            {
              "name": "noOverlap",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Will position the list around the button without overlapping it.",
              "fieldName": "noOverlap"
            },
            {
              "name": "noLabelFloat",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set the label is rendered only when not selected state.\nIt is useful when using the dropdown in an application menu bar.",
              "fieldName": "noLabelFloat"
            },
            {
              "name": "fitPositionTarget",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Fits the dropdown content width to the dropdown selector. Default to `false`.",
              "fieldName": "fitPositionTarget"
            },
            {
              "name": "restoreFocusOnClose",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "restoreFocusOnClose"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidatableMixin",
              "module": "/src/mixins/ValidatableMixin.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointDropdownMenuElement",
            "module": "src/elements/AnypointDropdownMenuElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The base class for Anypoint elements.",
          "name": "AnypointElement",
          "members": [
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change."
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change."
            }
          ],
          "attributes": [
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointElement",
            "module": "src/elements/AnypointElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointIconButtonElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-button`\nAnypoint styled button.",
          "name": "AnypointIconButtonElement",
          "members": [
            {
              "kind": "field",
              "name": "_ripple",
              "type": {
                "text": "MaterialRippleElement"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_spaceKeyDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_spaceKeyUpHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_buttonStateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_keyDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyUpHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_enterDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_enterUpHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "attribute": "elevation",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "attribute": "noink",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "privacy": "private",
              "default": "'low'",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "attribute": "emphasis",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_calculateElevation",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Computes current elevation for the material design.\nThe `emphasis` property is set when the updates are committed.",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_changedControlState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_transitionEndHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TransitionEvent"
                  }
                }
              ],
              "description": "Redirects the `transitionend` from the `material-ripple` element.\nThis is the only way to perform an action when the animation ends instead of counting on `click`.\nNote, when anypoint is enabled this event is not dispatched.",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnypointButtonBase",
            "module": "/src/elements/AnypointButtonBase.js"
          },
          "attributes": [
            {
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "fieldName": "elevation",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "fieldName": "noink",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "fieldName": "emphasis",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "transitionend",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointIconButtonElement",
            "module": "src/elements/AnypointIconButtonElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointIconItemElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-icon-item`\nAn Anypoint icon list item is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area.\nThis is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<anypoint-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.",
          "name": "AnypointIconItemElement",
          "members": [
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HoverableMixin",
              "module": "/src/mixins/HoverableMixin.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            },
            {
              "name": "ButtonStateMixin",
              "module": "/src/mixins/ButtonStateMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          },
          "attributes": [
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointIconItemElement",
            "module": "src/elements/AnypointIconItemElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointInputComboboxElement.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "dropdownTemplate"
        },
        {
          "kind": "variable",
          "name": "openedChanged"
        },
        {
          "kind": "variable",
          "name": "openedValue"
        },
        {
          "kind": "variable",
          "name": "dropdownClosed"
        },
        {
          "kind": "variable",
          "name": "dropdownOpened"
        },
        {
          "kind": "variable",
          "name": "selectHandler"
        },
        {
          "kind": "variable",
          "name": "deselectHandler"
        },
        {
          "kind": "variable",
          "name": "keydownHandler"
        },
        {
          "kind": "variable",
          "name": "onArrowUp"
        },
        {
          "kind": "variable",
          "name": "onArrowDown"
        },
        {
          "kind": "variable",
          "name": "onEsc"
        },
        {
          "kind": "class",
          "description": "`anypoint-input-combobox`",
          "name": "AnypointInputComboboxElement",
          "members": [
            {
              "kind": "field",
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign | undefined"
              },
              "default": "'top'",
              "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
              "attribute": "verticalAlign"
            },
            {
              "kind": "field",
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'left'",
              "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
              "attribute": "horizontalAlign"
            },
            {
              "kind": "field",
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
              "attribute": "verticalOffset"
            },
            {
              "kind": "field",
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
              "attribute": "horizontalOffset"
            },
            {
              "kind": "field",
              "name": "dynamicAlign",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
              "attribute": "dynamicAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "attribute": "openAnimationConfig"
            },
            {
              "kind": "field",
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "attribute": "closeAnimationConfig"
            },
            {
              "kind": "field",
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "attribute": "noAnimations",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\nThis property is a shortcut to set `scrollAction` to lock or refit.\nPrefer directly setting the `scrollAction` property.",
              "attribute": "allowOutsideScroll",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fitPositionTarget",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Dropdown fits the content width.\nDefault value is false.",
              "attribute": "fitPositionTarget"
            },
            {
              "kind": "field",
              "name": "[openedValue]",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean|undefined"
              },
              "description": "Whether the dropdown is rendered.",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contentElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "[openedChanged]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opened",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles the dropdown opened state"
            },
            {
              "kind": "method",
              "name": "[keydownHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the keydown event."
            },
            {
              "kind": "method",
              "name": "[onArrowUp]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handles arrow down press.\nOpens the dropdown if not opened and moves selection when needed."
            },
            {
              "kind": "method",
              "name": "[onArrowDown]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handles arrow up press.\nOpens the dropdown if not opened and moves selection when needed."
            },
            {
              "kind": "method",
              "name": "[selectHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "Sets value after an item was selected in the dropdown."
            },
            {
              "kind": "method",
              "name": "[dropdownClosed]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "[dropdownOpened]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_suffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "[dropdownTemplate]",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field"
            },
            {
              "kind": "field",
              "name": "_prefixed",
              "type": {
                "text": "HTMLSlotElement"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_infoAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_errorAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_inputType",
              "type": {
                "text": "SupportedInputTypes"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "bindValue",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_retargetEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event to retarget"
                }
              ],
              "description": "Re-targets an event that does not bubble",
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_prefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_assistiveTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_inputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            },
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign | undefined"
              },
              "default": "'top'",
              "description": "The orientation against which to align the element vertically\nrelative to the `positionTarget`. Possible values are \"top\", \"bottom\",\n\"middle\", \"auto\".",
              "fieldName": "verticalAlign"
            },
            {
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'left'",
              "description": "The orientation against which to align the element horizontally\nrelative to the `positionTarget`. Possible values are \"left\", \"right\",\n\"center\", \"auto\".",
              "fieldName": "horizontalAlign"
            },
            {
              "name": "verticalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `verticalAlign`.\n\nIf `verticalAlign` is \"top\" or \"middle\", this offset will increase or\ndecrease the distance to the top side of the screen: a negative offset\nwill move the dropdown upwards; a positive one, downwards.\n\nConversely if `verticalAlign` is \"bottom\", this offset will increase\nor decrease the distance to the bottom side of the screen: a negative\noffset will move the dropdown downwards; a positive one, upwards.",
              "fieldName": "verticalOffset"
            },
            {
              "name": "horizontalOffset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`, in the direction of alignment. You can think\nof it as increasing or decreasing the distance to the side of the\nscreen given by `horizontalAlign`.\n\nIf `horizontalAlign` is \"left\" or \"center\", this offset will increase or\ndecrease the distance to the left side of the screen: a negative offset\nwill move the dropdown to the left; a positive one, to the right.\n\nConversely if `horizontalAlign` is \"right\", this offset will increase\nor decrease the distance to the right side of the screen: a negative\noffset will move the dropdown to the right; a positive one, to the left.",
              "fieldName": "horizontalOffset"
            },
            {
              "name": "dynamicAlign",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, it will use `horizontalAlign` and `verticalAlign` values as\npreferred alignment and if there's not enough space, it will pick the\nvalues which minimize the cropping.",
              "fieldName": "dynamicAlign"
            },
            {
              "name": "openAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nopening of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "fieldName": "openAnimationConfig"
            },
            {
              "name": "closeAnimationConfig",
              "type": {
                "text": "IAnimationConfig[] | undefined"
              },
              "description": "An animation config. If provided, this will be used to animate the\nclosing of the dropdown. Pass an Array for multiple animations.\nSee `neon-animation` documentation for more animation configuration\ndetails.",
              "fieldName": "closeAnimationConfig"
            },
            {
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "fieldName": "noAnimations"
            },
            {
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.\nThis property is a shortcut to set `scrollAction` to lock or refit.\nPrefer directly setting the `scrollAction` property.",
              "fieldName": "allowOutsideScroll"
            },
            {
              "name": "fitPositionTarget",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Dropdown fits the content width.\nDefault value is false.",
              "fieldName": "fitPositionTarget"
            },
            {
              "name": "opened",
              "type": {
                "text": "boolean|undefined"
              },
              "description": "Whether the dropdown is rendered.",
              "fieldName": "opened"
            }
          ],
          "superclass": {
            "name": "AnypointInputElement",
            "module": "/src/elements/AnypointInputElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dropdownTemplate",
          "declaration": {
            "name": "dropdownTemplate",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "openedChanged",
          "declaration": {
            "name": "openedChanged",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "openedValue",
          "declaration": {
            "name": "openedValue",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "dropdownClosed",
          "declaration": {
            "name": "dropdownClosed",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "dropdownOpened",
          "declaration": {
            "name": "dropdownOpened",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "selectHandler",
          "declaration": {
            "name": "selectHandler",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "deselectHandler",
          "declaration": {
            "name": "deselectHandler",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "keydownHandler",
          "declaration": {
            "name": "keydownHandler",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "onArrowUp",
          "declaration": {
            "name": "onArrowUp",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "onArrowDown",
          "declaration": {
            "name": "onArrowDown",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "onEsc",
          "declaration": {
            "name": "onEsc",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointInputComboboxElement",
            "module": "src/elements/AnypointInputComboboxElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointInputElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointInputElement",
          "members": [
            {
              "kind": "field",
              "name": "_prefixed",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "_labelClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_infoAddonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_errorAddonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_inputType",
              "type": {
                "text": "SupportedInputTypes"
              }
            },
            {
              "kind": "field",
              "name": "bindValue",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "_retargetEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event to retarget"
                }
              ],
              "description": "Re-targets an event that does not bubble"
            },
            {
              "kind": "method",
              "name": "_suffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_prefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_assistiveTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_inputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "Event"
              }
            }
          ],
          "mixins": [
            {
              "name": "AnypointInputMixin",
              "module": "/src/mixins/AnypointInputMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointInputElement",
            "module": "src/elements/AnypointInputElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointItemBodyElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-item`\nAn Anypoint list item with 2 or 3 lines.",
          "name": "AnypointItemBodyElement",
          "members": [
            {
              "kind": "field",
              "name": "twoLine",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the item in a 2-line layout",
              "attribute": "twoLine",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "threeLine",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the item in a 3-line layout",
              "attribute": "threeLine",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "twoLine",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the item in a 2-line layout",
              "fieldName": "twoLine"
            },
            {
              "name": "threeLine",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Renders the item in a 3-line layout",
              "fieldName": "threeLine"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointItemBodyElement",
            "module": "src/elements/AnypointItemBodyElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointItemElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-item`\nAn Anypoint list item.",
          "name": "AnypointItemElement",
          "members": [
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HoverableMixin",
              "module": "/src/mixins/HoverableMixin.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            },
            {
              "name": "ButtonStateMixin",
              "module": "/src/mixins/ButtonStateMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          },
          "attributes": [
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointItemElement",
            "module": "src/elements/AnypointItemElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointListboxElement.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "ensureNodeId",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "node",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Ensures the node to have an ID.\nIt is later used with aria attributes."
        },
        {
          "kind": "class",
          "description": "",
          "name": "AnypointListboxElement",
          "members": [
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_initSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Initializes `aria-activedescendant` when element is attached to the DOM."
            },
            {
              "kind": "method",
              "name": "_selectHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Sets `aria-activedescendant` value to selected element's id."
            },
            {
              "kind": "method",
              "name": "_setActiveDescendant",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Sets `aria-activedescendant` value to node's id."
            },
            {
              "kind": "method",
              "name": "_deselectHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes `aria-activedescendant` from the element when item is\ndeselected."
            },
            {
              "kind": "method",
              "name": "_updateChildrenAnypoint",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "anypoint",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Current state of `anypoint` property"
                }
              ],
              "description": "Updates `anypoint` state on children.\nThis is a convenience method to set `anypoint` property on this element\nand propagate it on children instead of setting this property on each\nitem separately."
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "MenuMixin",
              "module": "/src/mixins/MenuMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          },
          "attributes": [
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ensureNodeId",
          "declaration": {
            "name": "ensureNodeId",
            "module": "src/elements/AnypointListboxElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointListboxElement",
            "module": "src/elements/AnypointListboxElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointMaskedInput.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointMaskedInputElement",
          "members": [
            {
              "kind": "field",
              "name": "_visibilityToggleIcon",
              "type": {
                "text": "SVGTemplateResult"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_visibilityToggleTitle",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_visibilityToggleLabel",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_inputType",
              "type": {
                "text": "SupportedInputTypes"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set the input renders the value visible and restores\noriginal input type.",
              "attribute": "visible"
            },
            {
              "kind": "method",
              "name": "toggleVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles `visible` property value."
            },
            {
              "kind": "method",
              "name": "_suffixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prefixed",
              "type": {
                "text": "HTMLSlotElement"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_labelClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_infoAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "_errorAddonClass",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "bindValue",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_retargetEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event to retarget"
                }
              ],
              "description": "Re-targets an event that does not bubble",
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_prefixTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_assistiveTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_labelTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_inputTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "visible",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set the input renders the value visible and restores\noriginal input type.",
              "fieldName": "visible"
            }
          ],
          "superclass": {
            "name": "AnypointInputElement",
            "module": "/src/elements/AnypointInputElement.js"
          },
          "events": [
            {
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "AnypointInputElement",
                "module": "src/elements/AnypointInputElement.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointMaskedInputElement",
            "module": "src/elements/AnypointMaskedInput.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointMenuButtonElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointMenuButtonElement",
          "members": [
            {
              "kind": "field",
              "name": "_opened",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "True if the content is currently displayed.",
              "attribute": "opened"
            },
            {
              "kind": "field",
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'left'",
              "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger.",
              "attribute": "horizontalAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign"
              },
              "default": "'top'",
              "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger.",
              "attribute": "verticalAlign",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dynamicAlign",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the `horizontalAlign` and `verticalAlign` properties will\nbe considered preferences instead of strict requirements when\npositioning the dropdown and may be changed if doing so reduces\nthe area of the dropdown falling outside of `fitInto`.",
              "attribute": "dynamicAlign"
            },
            {
              "kind": "field",
              "name": "horizontalOffset",
              "type": {
                "text": "number | undefined"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`. Use a negative value to offset to the\nleft, or a positive value to offset to the right.",
              "attribute": "horizontalOffset"
            },
            {
              "kind": "field",
              "name": "verticalOffset",
              "type": {
                "text": "number | undefined"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`. Use a negative value to offset towards the\ntop, or a positive value to offset towards the bottom.",
              "attribute": "verticalOffset"
            },
            {
              "kind": "field",
              "name": "noOverlap",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the dropdown will be positioned so that it doesn't overlap\nthe button.",
              "attribute": "noOverlap"
            },
            {
              "kind": "field",
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "attribute": "noAnimations"
            },
            {
              "kind": "field",
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.",
              "attribute": "allowOutsideScroll"
            },
            {
              "kind": "field",
              "name": "ignoreSelect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable automatically closing the dropdown after\na selection has been made.",
              "attribute": "ignoreSelect"
            },
            {
              "kind": "field",
              "name": "closeOnActivate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to enable automatically closing the dropdown after an\nitem has been activated, even if the selection did not change.",
              "attribute": "closeOnActivate"
            },
            {
              "kind": "field",
              "name": "_dropdownContent",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "This is the element intended to be bound as the focus target\nfor the `iron-dropdown` contained by `paper-menu-button`."
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "AnypointDropdownElement"
              }
            },
            {
              "kind": "field",
              "name": "contentElement",
              "type": {
                "text": "HTMLElement | null"
              }
            },
            {
              "kind": "field",
              "name": "onselect",
              "type": {
                "text": "EventListener"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Registers a callback function for `select` event",
              "parameters": [
                {
                  "description": "A callback to register. Pass `null` or `undefined`\nto clear the listener.",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_openedHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles the dropdown content between opened and closed."
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Make the dropdown content appear as an overlay positioned relative\nto the dropdown trigger."
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hides the dropdown content"
            },
            {
              "kind": "method",
              "name": "_activateHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_selectHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_disabledChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_openedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opened",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__overlayCanceledHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_closedHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "type",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "opened",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "True if the content is currently displayed.",
              "fieldName": "opened"
            },
            {
              "name": "horizontalAlign",
              "type": {
                "text": "HorizontalAlign"
              },
              "default": "'left'",
              "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger.",
              "fieldName": "horizontalAlign"
            },
            {
              "name": "verticalAlign",
              "type": {
                "text": "VerticalAlign"
              },
              "default": "'top'",
              "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger.",
              "fieldName": "verticalAlign"
            },
            {
              "name": "dynamicAlign",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the `horizontalAlign` and `verticalAlign` properties will\nbe considered preferences instead of strict requirements when\npositioning the dropdown and may be changed if doing so reduces\nthe area of the dropdown falling outside of `fitInto`.",
              "fieldName": "dynamicAlign"
            },
            {
              "name": "horizontalOffset",
              "type": {
                "text": "number | undefined"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `horizontalAlign`. Use a negative value to offset to the\nleft, or a positive value to offset to the right.",
              "fieldName": "horizontalOffset"
            },
            {
              "name": "verticalOffset",
              "type": {
                "text": "number | undefined"
              },
              "default": "0",
              "description": "A pixel value that will be added to the position calculated for the\ngiven `verticalAlign`. Use a negative value to offset towards the\ntop, or a positive value to offset towards the bottom.",
              "fieldName": "verticalOffset"
            },
            {
              "name": "noOverlap",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the dropdown will be positioned so that it doesn't overlap\nthe button.",
              "fieldName": "noOverlap"
            },
            {
              "name": "noAnimations",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable animations when opening and closing the\ndropdown.",
              "fieldName": "noAnimations"
            },
            {
              "name": "allowOutsideScroll",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.",
              "fieldName": "allowOutsideScroll"
            },
            {
              "name": "ignoreSelect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to disable automatically closing the dropdown after\na selection has been made.",
              "fieldName": "ignoreSelect"
            },
            {
              "name": "closeOnActivate",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Set to true to enable automatically closing the dropdown after an\nitem has been activated, even if the selection did not change.",
              "fieldName": "closeOnActivate"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointMenuButtonElement",
            "module": "src/elements/AnypointMenuButtonElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointProgressElement.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "secondaryProgressValue"
        },
        {
          "kind": "variable",
          "name": "indeterminateValue"
        },
        {
          "kind": "variable",
          "name": "secondaryRatioValue"
        },
        {
          "kind": "class",
          "description": "Anypoint styles progress bar.\n\nThe progress bars are for situations where the percentage completed can be\ndetermined. They give users a quick sense of how much longer an operation\nwill take.",
          "name": "AnypointProgressElement",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "True if the progress is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "[secondaryProgressValue]",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "[secondaryRatioValue]",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "[indeterminateValue]",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "secondaryProgress",
              "type": {
                "text": "number"
              },
              "description": "The number that represents the current secondary progress.",
              "attribute": "secondaryProgress"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "description": "Use an indeterminate progress indicator.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "secondaryRatio",
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "[rangeChanged]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "type": {
                "text": "number"
              },
              "default": "0"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "True if the progress is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "secondaryProgress",
              "type": {
                "text": "number"
              },
              "description": "The number that represents the current secondary progress.",
              "fieldName": "secondaryProgress"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "description": "Use an indeterminate progress indicator.",
              "fieldName": "indeterminate"
            }
          ],
          "mixins": [
            {
              "name": "RangeMixin",
              "module": "/src/mixins/RangeMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "secondaryProgressValue",
          "declaration": {
            "name": "secondaryProgressValue",
            "module": "src/elements/AnypointProgressElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "indeterminateValue",
          "declaration": {
            "name": "indeterminateValue",
            "module": "src/elements/AnypointProgressElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "secondaryRatioValue",
          "declaration": {
            "name": "secondaryRatioValue",
            "module": "src/elements/AnypointProgressElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointProgressElement",
            "module": "src/elements/AnypointProgressElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointRadioButtonElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-radio-button`\n\nAnypoint styled radio button.\n\n## Usage\n\nInstall element:\n\n```\nnpm i --save @anypoint-components/anypoint-radio-button\n```\n\nImport into your app:\n\n```html\n<script type=\"module\" src=\"node_modules/@anypoint-components/anypoint-radio-button.js\"></script>\n```\n\nOr into another component\n\n```javascript\nimport '@anypoint-components/anypoint-radio-button.js';\n```\n\nUse it:\n\n```html\n<paper-radio-group selectable=\"anypoint-radio-button\">\n <anypoint-radio-button name=\"a\">Apple</anypoint-radio-button>\n <anypoint-radio-button name=\"b\">Banana</anypoint-radio-button>\n <anypoint-radio-button name=\"c\">Orange</anypoint-radio-button>\n</paper-radio-group>\n```",
          "name": "AnypointRadioButtonElement",
          "members": [
            {
              "kind": "method",
              "name": "_checkedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Dispatches the `checkedchange` event"
            },
            {
              "kind": "method",
              "name": "_updateCheckedAria",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "checked",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for keyboard down event"
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handler for pointer click event"
            },
            {
              "kind": "field",
              "name": "_oldTabIndex",
              "type": {
                "text": "string | null | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_disabledChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Handles `disable` property state change and manages `aria-disabled`\nand `tabindex` attributes."
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            }
          ],
          "mixins": [
            {
              "name": "CheckedElementMixin",
              "module": "/src/mixins/CheckedElementMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointRadioButtonElement",
            "module": "src/elements/AnypointRadioButtonElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointRadioGroupElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A web component that groups custom radio buttons and handles selection inside\nthe group.\n\nRequirements for children:\n- must have role=\"radio\" attribute\n- must have name attribute\n- radio state change must be notified via `change` event.\n\nRadio buttons with the same name inside their group will have single selection.\nThis means when selecting a radio button any other currently selected button\nwill be deselected.\n\nAlso. when initializing the component, only last selected component keeps the\nselection.\nWhen new checked radio button is inserted into the group the selection is passed to the newly\narriving element.\n\nThis behavior is consistent with native DOM API.\n\nThe group element exposes `selected` property that holds a reference to\ncurrently selected radio button.\n\nExample\n\n```\n<anypoint-radio-group>\n <anypoint-radio-button name=\"option\"></anypoint-radio-button>\n <other-control role=\"button\" name=\"option\" checked></other-control>\n</anypoint-radio-group>\n```",
          "name": "AnypointRadioGroupElement",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "NodeList"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_processNodeAttributeChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "record",
                  "type": {
                    "text": "MutationRecord"
                  },
                  "description": "A MutationRecord received from MutationObserver\ncallback."
                }
              ],
              "description": "Function that manages attribute change.\nIf the changed attribute is `role` with value `radio` then the node is processed\nas a button and is added or removed from collection."
            },
            {
              "kind": "method",
              "name": "_deselectOthers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selected",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  },
                  "description": "The element to keep selection onto."
                }
              ]
            },
            {
              "kind": "method",
              "name": "_processAddedNodes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "nodes",
                  "type": {
                    "text": "HTMLElement[]"
                  },
                  "description": "List of nodes to process."
                }
              ],
              "description": "Adds `change` event listener to detected radio buttons.\nA button is considered as a radio button when its `role` is `radio`."
            },
            {
              "kind": "method",
              "name": "_processRemovedNodes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "nodes",
                  "type": {
                    "text": "NodeList"
                  },
                  "description": "Nodes to process"
                }
              ],
              "description": "Removes event listeners and possibly clears `selected` when removing nodes from\nlight DOM."
            },
            {
              "kind": "method",
              "name": "_nodeRemoved",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  },
                  "description": "Removed node"
                }
              ],
              "description": "A function to be called when a node from the light DOM has been removed.\nIt clears previously attached listeners and selection if passed node is\ncurrently selected node."
            },
            {
              "kind": "method",
              "name": "_onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Overrides `AnypointMenuMixin._onKeydown`. Adds right / left arrows support."
            },
            {
              "kind": "method",
              "name": "_applySelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "Selected / deselected item."
                },
                {
                  "name": "isSelected",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "True if the item is selected"
                }
              ],
              "description": "Overrides `AnypointSelectableMixin._applySelection` to manage item's checked\nstate."
            },
            {
              "kind": "method",
              "name": "_ensureSingleSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Ensures that the last child element is checked in the group."
            },
            {
              "kind": "method",
              "name": "_mutationHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "mutationsList",
                  "type": {
                    "text": "MutationRecord[]"
                  },
                  "description": "A list of changes record"
                }
              ],
              "description": "Overrides `AnypointSelectableMixin._mutationHandler`.\nProcesses dynamically added nodes and updates selection if needed."
            },
            {
              "kind": "method",
              "name": "_observeItems",
              "return": {
                "type": {
                  "text": "MutationObserver"
                }
              },
              "description": "Overrides `AnypointSelectableMixin._observeItems` to include subtree."
            },
            {
              "kind": "method",
              "name": "_disabledChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Disables children when disabled state changes"
            },
            {
              "kind": "field",
              "name": "multi",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "mixins": [
            {
              "name": "MenuMixin",
              "module": "/src/mixins/MenuMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointRadioGroupElement",
            "module": "src/elements/AnypointRadioGroupElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointSelectorElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointSelectorElement",
          "members": [
            {
              "kind": "method",
              "name": "createRenderRoot",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "MultiSelectableMixin",
              "module": "/src/mixins/MultiSelectableMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointSelectorElement",
            "module": "src/elements/AnypointSelectorElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointSwitchElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "`anypoint-switch`",
          "name": "AnypointSwitchElement",
          "members": [
            {
              "kind": "field",
              "name": "formDisabled",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "formDisabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "onchange",
              "type": {
                "text": "EventListener"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "description": "An event listener for the `change` event or null to unregister",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_buttonStateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Synchronizes the element's `active` and `checked` state."
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_checkedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_disabledChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disabled",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_mdContent",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_compatibleContent",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "toggles",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "ariaActiveAttribute",
              "type": {
                "text": "string"
              },
              "default": "'aria-checked'"
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "formDisabled",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "formDisabled"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ButtonStateMixin",
              "module": "/src/mixins/ButtonStateMixin.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/mixins/ControlStateMixin.js"
            },
            {
              "name": "CheckedElementMixin",
              "module": "/src/mixins/CheckedElementMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointSwitchElement",
            "module": "src/elements/AnypointSwitchElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointTabElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointTabElement",
          "members": [
            {
              "kind": "field",
              "name": "link",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the tab will forward keyboard clicks (enter/space) to\nthe first anchor element found in its descendants",
              "attribute": "link",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_ripple",
              "type": {
                "text": "MaterialRippleElement"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "AnypointButtonElement",
                "module": "src/elements/AnypointButtonElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_spaceKeyDownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AnypointButtonElement",
                "module": "src/elements/AnypointButtonElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_spaceKeyUpHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AnypointButtonElement",
                "module": "src/elements/AnypointButtonElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "attribute": "elevation",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "attribute": "noink",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "privacy": "private",
              "default": "'low'",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "attribute": "emphasis",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggles",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_calculateElevation",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Computes current elevation for the material design.\nThe `emphasis` property is set when the updates are committed.",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_changedControlState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_buttonStateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_transitionEndHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TransitionEvent"
                  }
                }
              ],
              "description": "Redirects the `transitionend` from the `material-ripple` element.\nThis is the only way to perform an action when the animation ends instead of counting on `click`.\nNote, when anypoint is enabled this event is not dispatched.",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "link",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the tab will forward keyboard clicks (enter/space) to\nthe first anchor element found in its descendants",
              "fieldName": "link"
            },
            {
              "name": "elevation",
              "type": {
                "text": "number | undefined"
              },
              "description": "The z-depth of this element, from 0-5. Setting to 0 will remove the\nshadow, and each increasing number greater than 0 will be \"deeper\"\nthan the last.\nThis is for MD implementation.",
              "fieldName": "elevation",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "When set ripple effect is not rendered.",
              "fieldName": "noink",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "emphasis",
              "type": {
                "text": "EmphasisValue | undefined"
              },
              "description": "Button emphasis in the UI.\n\nPossible values:\n- `low` - Text buttons are typically used for less important actions.\n- `medium` - Outlined buttons are used for more emphasis than text buttons due to the stroke.\n- `high` - Contained buttons have more emphasis, as they use use a color fill and shadow.\n\nDefault is \"low\".",
              "fieldName": "emphasis",
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "superclass": {
            "name": "AnypointButtonElement",
            "module": "/src/elements/AnypointButtonElement.js"
          },
          "events": [
            {
              "name": "transitionend",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "AnypointButtonBase",
                "module": "src/elements/AnypointButtonBase.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointTabElement",
            "module": "src/elements/AnypointTabElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointTabsElement.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "calcPercent",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "w",
              "type": {
                "text": "number"
              },
              "description": "Element width"
            },
            {
              "name": "w0",
              "type": {
                "text": "number"
              },
              "description": "Parent width"
            }
          ],
          "description": "Calculates value in percentages"
        },
        {
          "kind": "class",
          "description": "Tabs for anypoint web components",
          "name": "AnypointTabsElement",
          "members": [
            {
              "kind": "field",
              "name": "noBar",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the bottom bar to indicate the selected tab will not be shown.",
              "attribute": "noBar"
            },
            {
              "kind": "field",
              "name": "noSlide",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the slide effect for the bottom bar is disabled.",
              "attribute": "noSlide",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrollable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, tabs are scrollable and the tab width is based on the label\nwidth.",
              "attribute": "scrollable"
            },
            {
              "kind": "field",
              "name": "fitContainer",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, tabs expand to fit their container. This currently only applies\nwhen scrollable is true.",
              "attribute": "fitContainer"
            },
            {
              "kind": "field",
              "name": "disableDrag",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, dragging on the tabs to scroll is disabled.",
              "attribute": "disableDrag"
            },
            {
              "kind": "field",
              "name": "hideScrollButtons",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable\ntabs.",
              "attribute": "hideScrollButtons",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignBottom",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the tabs are aligned to bottom (the selection bar appears at the\ntop).",
              "attribute": "alignBottom"
            },
            {
              "kind": "field",
              "name": "autoselect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, tabs are automatically selected when focused using the\nkeyboard.",
              "attribute": "autoselect"
            },
            {
              "kind": "field",
              "name": "autoselectDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The delay (in milliseconds) between when the user stops interacting\nwith the tabs through the keyboard and when the focused item is\nautomatically selected (if `autoselect` is true).",
              "attribute": "autoselectDelay"
            },
            {
              "kind": "field",
              "name": "_leftHidden",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_rightHidden",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_contentClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_selectionClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_leftButtonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_rightButtonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "__tabsContainer",
              "type": {
                "text": "HTMLDivElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_tabsContainer",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "__tabsContent",
              "type": {
                "text": "HTMLDivElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_tabsContent",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "__selectionBar",
              "type": {
                "text": "HTMLDivElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_selectionBar",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "_tabContainerScrollSize",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "default": "10"
            },
            {
              "kind": "field",
              "name": "_holdDelay",
              "type": {
                "text": "number"
              },
              "default": "1"
            },
            {
              "kind": "field",
              "name": "_holdJob",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "_itemsHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "__resizeDebounce",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "method",
              "name": "_sizingHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_previousTab",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "method",
              "name": "_updateResized",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_deselectTimer",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "_selectHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_deselectHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_blurHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateDeselect",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_scroll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dx",
                  "default": "0",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_affectScroll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_affectScrollButton",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_pos",
              "type": {
                "text": "{ width: number, left: number } | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_width",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_left",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "method",
              "name": "_tabChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tab",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "old",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_positionBar",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "width",
                  "default": "0"
                },
                {
                  "name": "left",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_activateHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_pendingActivationItem",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_pendingActivationTimeout",
              "type": {
                "text": "any"
              },
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "_scheduleActivation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "delay",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_delayedActivation",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_cancelPendingActivation",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onBarTransitionEnd",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "anypointChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `anypoint` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "_scrollToSelectedIfNeeded",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tabWidth",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "tabOffsetLeft",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_computeScrollButtonClass",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "scrollable",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "hideScrollButtons",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onScrollButtonUp",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onLeftScrollButtonDown",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onRightScrollButtonDown",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_scrollToLeft",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_scrollToRight",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "__lastTouchX",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_touchMove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_touchStart",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_touchEnd",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_leftButtonTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | string"
                }
              },
              "parameters": [
                {
                  "name": "scrollable",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_rightButtonTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | string"
                }
              },
              "parameters": [
                {
                  "name": "scrollable",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectionTemplate",
              "return": {
                "type": {
                  "text": "TemplateResult | string"
                }
              }
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "string"
              },
              "default": "'anypoint-tab'"
            },
            {
              "kind": "field",
              "name": "anypointValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlinedValue",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "attribute": "anypoint",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "kind": "method",
              "name": "outlinedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "To be used by child classes when the `outlined` property change.",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "noBar",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the bottom bar to indicate the selected tab will not be shown.",
              "fieldName": "noBar"
            },
            {
              "name": "noSlide",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the slide effect for the bottom bar is disabled.",
              "fieldName": "noSlide"
            },
            {
              "name": "scrollable",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, tabs are scrollable and the tab width is based on the label\nwidth.",
              "fieldName": "scrollable"
            },
            {
              "name": "fitContainer",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, tabs expand to fit their container. This currently only applies\nwhen scrollable is true.",
              "fieldName": "fitContainer"
            },
            {
              "name": "disableDrag",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, dragging on the tabs to scroll is disabled.",
              "fieldName": "disableDrag"
            },
            {
              "name": "hideScrollButtons",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, scroll buttons (left/right arrow) will be hidden for scrollable\ntabs.",
              "fieldName": "hideScrollButtons"
            },
            {
              "name": "alignBottom",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, the tabs are aligned to bottom (the selection bar appears at the\ntop).",
              "fieldName": "alignBottom"
            },
            {
              "name": "autoselect",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If true, tabs are automatically selected when focused using the\nkeyboard.",
              "fieldName": "autoselect"
            },
            {
              "name": "autoselectDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The delay (in milliseconds) between when the user stops interacting\nwith the tabs through the keyboard and when the focused item is\nautomatically selected (if `autoselect` is true).",
              "fieldName": "autoselectDelay"
            },
            {
              "name": "anypoint",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Anypoint theme.",
              "fieldName": "anypoint",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Enables Material's outlined theme.",
              "fieldName": "outlined",
              "inheritedFrom": {
                "name": "AnypointElement",
                "module": "src/elements/AnypointElement.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "MenubarMixin",
              "module": "/src/mixins/MenubarMixin.js"
            },
            {
              "name": "ResizableMixin",
              "module": "/src/mixins/ResizableMixin.js"
            }
          ],
          "superclass": {
            "name": "AnypointElement",
            "module": "/src/elements/AnypointElement.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "calcPercent",
          "declaration": {
            "name": "calcPercent",
            "module": "src/elements/AnypointTabsElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointTabsElement",
            "module": "src/elements/AnypointTabsElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/AnypointTextareaElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnypointTextareaElement",
          "members": [
            {
              "kind": "field",
              "name": "_labelClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_infoAddonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "_errorAddonClass",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "cols",
              "type": {
                "text": "number | undefined"
              },
              "description": "Binds this to the `<textarea>`'s `cols` property.",
              "attribute": "cols"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number | undefined"
              },
              "description": "Binds this to the `<textarea>`'s `rows` property.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "wrap",
              "type": {
                "text": "\"soft\" | \"hard\" | undefined"
              },
              "description": "Binds this to the `<textarea>`'s `wrap` property.",
              "attribute": "wrap"
            }
          ],
          "attributes": [
            {
              "name": "cols",
              "type": {
                "text": "number | undefined"
              },
              "description": "Binds this to the `<textarea>`'s `cols` property.",
              "fieldName": "cols"
            },
            {
              "name": "rows",
              "type": {
                "text": "number | undefined"
              },
              "description": "Binds this to the `<textarea>`'s `rows` property.",
              "fieldName": "rows"
            },
            {
              "name": "wrap",
              "type": {
                "text": "\"soft\" | \"hard\" | undefined"
              },
              "description": "Binds this to the `<textarea>`'s `wrap` property.",
              "fieldName": "wrap"
            }
          ],
          "mixins": [
            {
              "name": "AnypointInputMixin",
              "module": "/src/mixins/AnypointInputMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "AnypointTextareaElement",
            "module": "src/elements/AnypointTextareaElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/BottomSheetElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Material design: [Bottom sheets](https://material.google.com/components/bottom-sheets.html#)\n\n# `<bottom-sheet>`\n\nBottom sheets slide up from the bottom of the screen to reveal more content.\n\n### Example\n\n```html\n<bottom-sheet>\n   <paper-icon-item>\n     <iron-icon src=\"inbox.png\" item-icon></iron-icon>\n     Inbox\n   </paper-icon-item>\n   <paper-icon-item>\n     <iron-icon src=\"keep.png\" item-icon></iron-icon>\n     Keep\n   </paper-icon-item>\n   <paper-icon-item>\n     <iron-icon src=\"hangouts.png\" item-icon></iron-icon>\n     Hangouts\n   </paper-icon-item>\n </bottom-sheet>\n```\n\n### Positioning\n\nUse the `fit-bottom` class to position the bar at the bottom of the app and with full width;\n\nUse `center-bottom` class to display the bar at the bottom centered on a page.\n\n### Styling\n\n`<bottom-sheet>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--bottom-sheet-background-color` | The bottom-sheet background-color | `#fff`\n`--bottom-sheet-color` | The bottom-sheet color | `#323232`\n`--bottom-sheet-max-width` | Max width of the element | ``\n`--bottom-sheet-max-height` | Max height of the element | ``\n`--bottom-sheet-label-color` | Color of the label | `rgba(0, 0, 0, 0.54)`\n`--bottom-sheet-box-shadow` | Box shadow property of the element | `0 2px 5px 0 rgba(0, 0, 0, 0.26)`",
          "name": "BottomSheetElement",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the bottom sheet.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "noPadding",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Removes padding from the element styles",
              "attribute": "noPadding",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_fitInto",
              "type": {
                "text": "HTMLElement | Window"
              },
              "default": "window"
            },
            {
              "kind": "field",
              "name": "fitInto",
              "type": {
                "text": "HTMLElement | Window"
              },
              "attribute": "fitInto"
            },
            {
              "kind": "field",
              "name": "scrollTarget",
              "type": {
                "text": "HTMLElement"
              },
              "description": "Returns the scrolling element."
            },
            {
              "kind": "method",
              "name": "_openedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opened",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderOpened",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overridden from `ArcOverlayMixin`."
            },
            {
              "kind": "method",
              "name": "_renderClosed",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overridden from `ArcOverlayMixin`."
            },
            {
              "kind": "method",
              "name": "_onFitIntoChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fitInto",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | Window"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "__onTransitionEnd",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TransitionEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "announce",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "The label of the bottom sheet.",
              "fieldName": "label"
            },
            {
              "name": "noPadding",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Removes padding from the element styles",
              "fieldName": "noPadding"
            },
            {
              "name": "fitInto",
              "type": {
                "text": "HTMLElement | Window"
              },
              "fieldName": "fitInto"
            }
          ],
          "mixins": [
            {
              "name": "OverlayMixin",
              "module": "/src/mixins/OverlayMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "BottomSheetElement",
            "module": "src/elements/BottomSheetElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/ColorInputSelectorElement.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "checkedHandler"
        },
        {
          "kind": "variable",
          "name": "colorHandler"
        },
        {
          "kind": "variable",
          "name": "toggleHandler"
        },
        {
          "kind": "variable",
          "name": "keydownHandler"
        },
        {
          "kind": "variable",
          "name": "notify"
        },
        {
          "kind": "variable",
          "name": "checkboxTemplate"
        },
        {
          "kind": "variable",
          "name": "selectorTemplate"
        },
        {
          "kind": "variable",
          "name": "labelTemplate"
        },
        {
          "kind": "class",
          "description": "",
          "name": "ColorInputSelectorElement",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "Selected color",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "enabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the color is enabled or not",
              "attribute": "enabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "[notify]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "[checkedHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[colorHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ],
              "description": "A handler for the color change. Updates color property value."
            },
            {
              "kind": "method",
              "name": "[toggleHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "A handler for the label click. Toggles enabled property."
            },
            {
              "kind": "method",
              "name": "[keydownHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[checkboxTemplate]",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "[selectorTemplate]",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "[labelTemplate]",
              "return": {
                "type": {
                  "text": ""
                }
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "Selected color",
              "fieldName": "value"
            },
            {
              "name": "enabled",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "Whether the color is enabled or not",
              "fieldName": "enabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "checkedHandler",
          "declaration": {
            "name": "checkedHandler",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "colorHandler",
          "declaration": {
            "name": "colorHandler",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "toggleHandler",
          "declaration": {
            "name": "toggleHandler",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "keydownHandler",
          "declaration": {
            "name": "keydownHandler",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "notify",
          "declaration": {
            "name": "notify",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "checkboxTemplate",
          "declaration": {
            "name": "checkboxTemplate",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "selectorTemplate",
          "declaration": {
            "name": "selectorTemplate",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "labelTemplate",
          "declaration": {
            "name": "labelTemplate",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ColorInputSelectorElement",
            "module": "src/elements/ColorInputSelectorElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/ColorSelectorElement.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "colorValue"
        },
        {
          "kind": "variable",
          "name": "colorTriggerHandler"
        },
        {
          "kind": "variable",
          "name": "inputHandler"
        },
        {
          "kind": "class",
          "description": "",
          "name": "ColorSelectorElement",
          "members": [
            {
              "kind": "field",
              "name": "[colorValue]",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "Selected color",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "[colorTriggerHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Triggers the native color picker."
            },
            {
              "kind": "method",
              "name": "[inputHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field"
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "Selected color",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "colorValue",
          "declaration": {
            "name": "colorValue",
            "module": "src/elements/ColorSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "colorTriggerHandler",
          "declaration": {
            "name": "colorTriggerHandler",
            "module": "src/elements/ColorSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "inputHandler",
          "declaration": {
            "name": "inputHandler",
            "module": "src/elements/ColorSelectorElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ColorSelectorElement",
            "module": "src/elements/ColorSelectorElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/DateTimeElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An element to display formatted date and time.\n\nThe `date` property accepts Date object, Number as a timestamp or string\nthat will be parsed to the Date object.\n\nThis element uses the `Intl` interface which is available in IE 11+ browsers.\n\nTo format the date use [Intl.DateTimeFormat]\n(https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat)\ninterface options.\n\nThe default value for each date-time component property is undefined,\nbut if all component properties are undefined, then year, month, and day\nare assumed to be \"numeric\" (per spec).\n\n### Example\n\n```html\n<date-time date=\"2010-12-10T11:50:45Z\" year=\"numeric\" month=\"narrow\" day=\"numeric\"></date-time>\n```\n\nThe element provides accessibility by using the `time` element and setting\nthe `datetime` attribute on it.\n\n### Styling\n\n`<date-time>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--date-time` | Mixin applied to the element | `{}`",
          "name": "DateTimeElement",
          "members": [
            {
              "kind": "field",
              "name": "_observer",
              "privacy": "protected",
              "default": "new MutationObserver(() => this._mutationHandler())"
            },
            {
              "kind": "method",
              "name": "_mutationHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "locales",
              "type": {
                "text": "string | null"
              },
              "description": "A string with a BCP 47 language tag, or an array of such strings.\nFor the general form and interpretation of the locales argument,\nsee the Intl page.\nThe following Unicode extension keys are allowed:\n- nu - Numbering system. Possible values include: \"arab\", \"arabext\",\n\"bali\", \"beng\", \"deva\", \"fullwide\", \"gujr\", \"guru\", \"hanidec\", \"khmr\",\n\"knda\", \"laoo\", \"latn\", \"limb\", \"mlym\", \"mong\", \"mymr\", \"orya\",\n\"tamldec\", \"telu\", \"thai\", \"tibt\".\n- ca - Calendar. Possible values include: \"buddhist\", \"chinese\",\n\"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\",\n\"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\"."
            },
            {
              "kind": "field",
              "name": "year",
              "type": {
                "text": "DateTimeNumberOptions | null"
              },
              "description": "The representation of the year.",
              "parameters": [
                {
                  "description": "Possible values are \"numeric\", \"2-digit\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "month",
              "type": {
                "text": "DateTimeTextNumberOptions | null"
              },
              "description": "The representation of the month.",
              "parameters": [
                {
                  "description": "Possible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "day",
              "type": {
                "text": "DateTimeNumberOptions | null"
              },
              "description": "The representation of the day.",
              "parameters": [
                {
                  "description": "Possible values are \"numeric\", \"2-digit\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "hour",
              "type": {
                "text": "DateTimeNumberOptions | null"
              },
              "description": "The representation of the hour.",
              "parameters": [
                {
                  "description": "Possible values are \"numeric\", \"2-digit\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "minute",
              "type": {
                "text": "DateTimeNumberOptions | null"
              },
              "description": "The representation of the minute.",
              "parameters": [
                {
                  "description": "Possible values are \"numeric\", \"2-digit\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "second",
              "type": {
                "text": "DateTimeNumberOptions | null"
              },
              "description": "The representation of the second.",
              "parameters": [
                {
                  "description": "Possible values are \"numeric\", \"2-digit\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "weekday",
              "type": {
                "text": "DateTimeTextOptions | null"
              },
              "description": "The representation of the weekday.",
              "parameters": [
                {
                  "description": "Possible values are \"narrow\", \"short\", \"long\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "timeZoneName",
              "type": {
                "text": "DateTimeTimezoneOptions | null"
              },
              "description": "The representation of the time zone name.",
              "parameters": [
                {
                  "description": "Possible values are \"short\", \"long\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "timeZone",
              "type": {
                "text": "string | null"
              },
              "description": "The time zone to use. The only value implementations must recognize\nis \"UTC\"; the default is the runtime's default time zone.\nImplementations may also recognize the time zone names of the IANA\ntime zone database, such as \"Asia/Shanghai\", \"Asia/Kolkata\",\n\"America/New_York\"."
            },
            {
              "kind": "field",
              "name": "era",
              "type": {
                "text": "DateTimeTextOptions | null"
              },
              "description": "The representation of the era.",
              "parameters": [
                {
                  "description": "Possible values are \"narrow\", \"short\", \"long\".",
                  "name": "v"
                }
              ]
            },
            {
              "kind": "field",
              "name": "__hour12set",
              "type": {
                "text": "boolean | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "hour12",
              "type": {
                "text": "boolean | null"
              },
              "description": "Whether to use 12-hour time (as opposed to 24-hour time).\nPossible values are `true` and `false`; the default is locale\ndependent."
            },
            {
              "kind": "field",
              "name": "__date",
              "type": {
                "text": "Date | string | number | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | string | number | null"
              },
              "description": "A date object to render.\nIt can be a `Date` object, number representing a timestamp\nor valid date string. The argument is parsed by `Date` constructor\nto produce the value.",
              "parameters": [
                {
                  "description": "The date to render",
                  "name": "v",
                  "type": {
                    "text": "Date|string|number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "itemprop",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "_getParsableDate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "string | number | Date | null"
                  },
                  "description": "A date to parse"
                }
              ],
              "description": "Parses input `date` to a Date object."
            },
            {
              "kind": "method",
              "name": "_getIntlOptions",
              "return": {
                "type": {
                  "text": "Intl.DateTimeFormatOptions"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getTimeNode",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "locales"
            },
            {
              "name": "date"
            },
            {
              "name": "year"
            },
            {
              "name": "month"
            },
            {
              "name": "day"
            },
            {
              "name": "hour"
            },
            {
              "name": "minute"
            },
            {
              "name": "second"
            },
            {
              "name": "weekday"
            },
            {
              "name": "time-zone-name"
            },
            {
              "name": "era"
            },
            {
              "name": "time-zone"
            },
            {
              "name": "hour12"
            },
            {
              "name": "itemprop"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "DateTimeElement",
            "module": "src/elements/DateTimeElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/MaterialRippleElement.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "animating"
        },
        {
          "kind": "variable",
          "name": "animatingValue"
        },
        {
          "kind": "variable",
          "name": "keyEventTarget"
        },
        {
          "kind": "variable",
          "name": "keyDownHandler"
        },
        {
          "kind": "variable",
          "name": "keyUpHandler"
        },
        {
          "kind": "variable",
          "name": "uiUpAction"
        },
        {
          "kind": "variable",
          "name": "uiDownAction"
        },
        {
          "kind": "variable",
          "name": "animateRipple"
        },
        {
          "kind": "variable",
          "name": "onAnimationComplete"
        },
        {
          "kind": "variable",
          "name": "addRipple"
        },
        {
          "kind": "variable",
          "name": "removeRipple"
        },
        {
          "kind": "class",
          "description": "",
          "name": "MaterialRippleElement",
          "members": [
            {
              "kind": "field",
              "name": "initialOpacity",
              "type": {
                "text": "number"
              },
              "default": "0.25",
              "description": "The initial opacity set on the wave.",
              "attribute": "initialOpacity"
            },
            {
              "kind": "field",
              "name": "opacityDecayVelocity",
              "type": {
                "text": "number"
              },
              "default": "0.8",
              "description": "How fast (opacity per second) the wave fades out.",
              "attribute": "opacityDecayVelocity"
            },
            {
              "kind": "field",
              "name": "recenters",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "description": "If true, ripples will exhibit a gravitational pull towards\nthe center of their container as they fade away.",
              "attribute": "recenters"
            },
            {
              "kind": "field",
              "name": "center",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "description": "If true, ripples will center inside its container",
              "attribute": "center"
            },
            {
              "kind": "field",
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "description": "If true, the ripple will not generate a ripple effect\nvia pointer interaction.\nCalling ripple's imperative api like `simulatedRipple` will\nstill generate the ripple effect.",
              "attribute": "noink",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "[animatingValue]",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "animating",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "[animating]"
            },
            {
              "kind": "field",
              "name": "[keyEventTarget]",
              "type": {
                "text": "EventTarget | undefined"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "EventTarget | undefined"
              }
            },
            {
              "kind": "field",
              "name": "shouldKeepAnimating",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "ripples",
              "type": {
                "text": "Ripple[]"
              },
              "default": "[]",
              "description": "A list of the visual ripples."
            },
            {
              "kind": "method",
              "name": "simulatedRipple",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Makes a ripple effect in a default position."
            },
            {
              "kind": "method",
              "name": "[uiDownAction]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "optional": true,
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Provokes a ripple down effect via a UI event,\nrespecting the `noink` property."
            },
            {
              "kind": "method",
              "name": "down",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "optional": true,
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "When present it uses the `x` and `y` as a start coordinates."
                }
              ],
              "description": "Provokes a ripple down effect via a UI event,\n*not* respecting the `noink` property."
            },
            {
              "kind": "method",
              "name": "up",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Provokes a ripple up effect via a UI event,\n*not* respecting the `noink` property."
            },
            {
              "kind": "method",
              "name": "[uiUpAction]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Provokes a ripple up effect via a UI event,\nrespecting the `noink` property."
            },
            {
              "kind": "method",
              "name": "[onAnimationComplete]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "[addRipple]",
              "return": {
                "type": {
                  "text": "Ripple | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "[removeRipple]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ripple",
                  "type": {
                    "text": "Ripple"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[animateRipple]",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "[keyDownHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "[keyUpHandler]",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field"
            }
          ],
          "events": [
            {
              "name": "transitionend",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "initialOpacity",
              "type": {
                "text": "number"
              },
              "default": "0.25",
              "description": "The initial opacity set on the wave.",
              "fieldName": "initialOpacity"
            },
            {
              "name": "opacityDecayVelocity",
              "type": {
                "text": "number"
              },
              "default": "0.8",
              "description": "How fast (opacity per second) the wave fades out.",
              "fieldName": "opacityDecayVelocity"
            },
            {
              "name": "recenters",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "description": "If true, ripples will exhibit a gravitational pull towards\nthe center of their container as they fade away.",
              "fieldName": "recenters"
            },
            {
              "name": "center",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "description": "If true, ripples will center inside its container",
              "fieldName": "center"
            },
            {
              "name": "noink",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "false",
              "description": "If true, the ripple will not generate a ripple effect\nvia pointer interaction.\nCalling ripple's imperative api like `simulatedRipple` will\nstill generate the ripple effect.",
              "fieldName": "noink"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animating",
          "declaration": {
            "name": "animating",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "animatingValue",
          "declaration": {
            "name": "animatingValue",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "keyEventTarget",
          "declaration": {
            "name": "keyEventTarget",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "keyDownHandler",
          "declaration": {
            "name": "keyDownHandler",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "keyUpHandler",
          "declaration": {
            "name": "keyUpHandler",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "uiUpAction",
          "declaration": {
            "name": "uiUpAction",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "uiDownAction",
          "declaration": {
            "name": "uiDownAction",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "animateRipple",
          "declaration": {
            "name": "animateRipple",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "onAnimationComplete",
          "declaration": {
            "name": "onAnimationComplete",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "addRipple",
          "declaration": {
            "name": "addRipple",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "removeRipple",
          "declaration": {
            "name": "removeRipple",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MaterialRippleElement",
            "module": "src/elements/MaterialRippleElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/OverlayBackdropElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OverlayBackdropElement",
          "members": [
            {
              "kind": "field",
              "name": "__opened",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "__openedRaf",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isAttached",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "opened",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "prepare",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Appends the backdrop to document body if needed."
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Shows the backdrop."
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hides the backdrop."
            },
            {
              "kind": "method",
              "name": "complete",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes the backdrop from document body if needed."
            },
            {
              "kind": "method",
              "name": "_onTransitionend",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_openedChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opened",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleClass",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "klass",
                  "type": {
                    "text": "string"
                  },
                  "description": "CSS class name to toggle"
                },
                {
                  "name": "condition",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Boolean condition to test whether the class should be added or removed."
                }
              ],
              "description": "Toggles class on this element."
            }
          ],
          "attributes": [
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "opened"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "OverlayBackdropElement",
            "module": "src/elements/OverlayBackdropElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/ScrollThresholdElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A port of `iron-scroll-threshold` element.",
          "name": "ScrollThresholdElement",
          "members": [
            {
              "kind": "field",
              "name": "upperThreshold",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Distance from the top (or left, for horizontal) bound of the scroller\nwhere the \"upper trigger\" will fire.",
              "attribute": "upperThreshold"
            },
            {
              "kind": "field",
              "name": "lowerThreshold",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Distance from the bottom (or right, for horizontal) bound of the scroller\nwhere the \"lower trigger\" will fire.",
              "attribute": "lowerThreshold"
            },
            {
              "kind": "field",
              "name": "_horizontal",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_upperTriggered",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_lowerTriggered",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_scrollDebouncer",
              "type": {
                "text": "number"
              },
              "default": "200"
            },
            {
              "kind": "field",
              "name": "upperTriggered",
              "type": {
                "text": "boolean"
              },
              "description": "Read-only value that tracks the triggered state of the upper threshold."
            },
            {
              "kind": "field",
              "name": "lowerTriggered",
              "type": {
                "text": "boolean"
              },
              "description": "Read-only value that tracks the triggered state of the lower threshold."
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "True if the orientation of the scroller is horizontal.",
              "attribute": "horizontal"
            },
            {
              "kind": "field",
              "name": "_defaultScrollTarget",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "onlowerthreshold",
              "type": {
                "text": "EventListener | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Registers event listener for `lowerthreshold` event.",
              "parameters": [
                {
                  "description": "Function to register. Pass null or undefined to clear\nregistered function.",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "field",
              "name": "onupperthreshold",
              "type": {
                "text": "EventListener | undefined"
              },
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Registers event listener for `upperthreshold` event.",
              "parameters": [
                {
                  "description": "Function to register. Pass null or undefined to clear\nregistered function.",
                  "name": "value"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_thresholdDebouncer",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__initDebouncer",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_scrollTargetChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "HTMLElement | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setOverflow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "scrollTarget",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_scrollHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_initCheck",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "checkScrollThresholds",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Checks the scroll thresholds.\nThis method is automatically called by iron-scroll-threshold."
            },
            {
              "kind": "method",
              "name": "clearTriggers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clear the upper and lower threshold states."
            }
          ],
          "events": [
            {
              "name": "upperchange",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "upperthreshold",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "lowerchange",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "lowerthreshold",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "upperThreshold",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Distance from the top (or left, for horizontal) bound of the scroller\nwhere the \"upper trigger\" will fire.",
              "fieldName": "upperThreshold"
            },
            {
              "name": "lowerThreshold",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Distance from the bottom (or right, for horizontal) bound of the scroller\nwhere the \"lower trigger\" will fire.",
              "fieldName": "lowerThreshold"
            },
            {
              "name": "horizontal",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "True if the orientation of the scroller is horizontal.",
              "fieldName": "horizontal"
            }
          ],
          "mixins": [
            {
              "name": "ScrollTargetMixin",
              "module": "/src/mixins/ScrollTargetMixin.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ScrollThresholdElement",
            "module": "src/elements/ScrollThresholdElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/StarRatingElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A web component written in plain JavaScript to render a 5 star rating.\n\nBy default it is an interactive element where the user can change the selection.\nAdd `readOnly` attribute/JS property to disable this behavior.\n\n## Example\n\n```html\n<star-rating value=\"3\"></star-rating>\n```\n### Styling\n\n`<exchange-search-list-item>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--star-rating-width` | Icon width | `24px`\n`--star-rating-height` | Icon width | `24px`\n`--star-rating-unselected-color` | Icon color when not selected | `#eeeeee`\n`--star-rating-selected-color` | Icon color when selected | `#fdd835`\n`--star-rating-active-color` | Icon color when active (focus, hover) | `#e0be25`",
          "name": "StarRatingElement",
          "members": [
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "HTMLTemplateElement"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "__data__",
              "type": {
                "text": "any"
              },
              "privacy": "protected",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "__rendering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number|undefined"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "onchange",
              "type": {
                "text": "EventListener"
              }
            },
            {
              "kind": "method",
              "name": "_render",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_doRender",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_ensureStars",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_clickHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keydownHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectionFromEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_notifyValueChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "value"
            },
            {
              "name": "readonly"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "StarRatingElement",
            "module": "src/elements/StarRatingElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/events-target-mixin/eventable-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventableElement",
          "members": [
            {
              "kind": "field",
              "name": "_calledCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "_calledCount"
            },
            {
              "kind": "field",
              "name": "called",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "calledOnce",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "_attachListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "EventTarget"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_detachListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "EventTarget"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_testEventHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "_calledCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "_calledCount"
            }
          ],
          "mixins": [
            {
              "name": "EventsTargetMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "eventable-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "eventable-element",
          "declaration": {
            "name": "EventableElement",
            "module": "test/events-target-mixin/eventable-element.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventableElement",
          "declaration": {
            "name": "EventableElement",
            "module": "test/events-target-mixin/eventable-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/events-target-mixin/eventable-object.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventableObject",
          "mixins": [
            {
              "name": "EventsTargetMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "TestClass",
            "module": "test/events-target-mixin/eventable-object.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventableObject",
          "declaration": {
            "name": "EventableObject",
            "module": "test/events-target-mixin/eventable-object.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/events-target-mixin/native-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventableNativeElement",
          "members": [
            {
              "kind": "field",
              "name": "_calledCount",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "called",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "calledOnce",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "_attachListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "EventTarget"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_detachListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "EventTarget"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_testEventHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "EventsTargetMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "eventable-native-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventableNativeElement",
          "declaration": {
            "name": "EventableNativeElement",
            "module": "test/events-target-mixin/native-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "eventable-native-element",
          "declaration": {
            "name": "EventableNativeElement",
            "module": "test/events-target-mixin/native-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/lib/helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "keyDown",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "EventTarget"
              }
            },
            {
              "name": "code",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "keyUp",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "EventTarget"
              }
            },
            {
              "name": "code",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "keyDownUp",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "EventTarget"
              }
            },
            {
              "name": "code",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "keyDown",
          "declaration": {
            "name": "keyDown",
            "module": "test/lib/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "keyUp",
          "declaration": {
            "name": "keyUp",
            "module": "test/lib/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "keyDownUp",
          "declaration": {
            "name": "keyDownUp",
            "module": "test/lib/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/menu-mixin/test-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestMenu",
          "members": [
            {
              "kind": "field",
              "name": "extraContent",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "mixins": [
            {
              "name": "MenuMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestMenu",
          "declaration": {
            "name": "TestMenu",
            "module": "test/menu-mixin/test-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-menu",
          "declaration": {
            "name": "TestMenu",
            "module": "test/menu-mixin/test-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/menu-mixin/test-menubar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestMenubar",
          "members": [
            {
              "kind": "field",
              "name": "extraContent",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "mixins": [
            {
              "name": "MenubarMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-menubar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestMenubar",
          "declaration": {
            "name": "TestMenubar",
            "module": "test/menu-mixin/test-menubar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-menubar",
          "declaration": {
            "name": "TestMenubar",
            "module": "test/menu-mixin/test-menubar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/menu-mixin/test-nested-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestNestedMenu",
          "members": [
            {
              "kind": "field",
              "name": "actualMenu",
              "type": {
                "text": "TestMenu"
              }
            }
          ],
          "mixins": [
            {
              "name": "MenuMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-nested-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestNestedMenu",
          "declaration": {
            "name": "TestNestedMenu",
            "module": "test/menu-mixin/test-nested-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-nested-menu",
          "declaration": {
            "name": "TestNestedMenu",
            "module": "test/menu-mixin/test-nested-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/hoverable-test-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HoverableTestElement",
          "members": [],
          "mixins": [
            {
              "name": "HoverableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "hoverable-test-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HoverableTestElement",
          "declaration": {
            "name": "HoverableTestElement",
            "module": "test/mixins/hoverable-test-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "hoverable-test-element",
          "declaration": {
            "name": "HoverableTestElement",
            "module": "test/mixins/hoverable-test-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/resize-elements.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XResizerParentFiltered",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "any | undefined"
              },
              "attribute": "active"
            },
            {
              "kind": "method",
              "name": "resizerShouldNotify",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "any | undefined"
              },
              "fieldName": "active"
            }
          ],
          "mixins": [
            {
              "name": "ResizableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-resizer-parent-filtered",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "XResizableInShadow",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-resizable-in-shadow",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-element",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "XShadowResizable",
          "members": [
            {
              "kind": "field",
              "name": "ironResizeCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "ironResizeCount",
              "inheritedFrom": {
                "name": "ObserveResizeMixin",
                "module": "test/mixins/resize-elements.ts"
              }
            },
            {
              "kind": "method",
              "name": "_incrementIronResizeCount",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ObserveResizeMixin",
                "module": "test/mixins/resize-elements.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ObserveResizeMixin",
              "module": "test/mixins/resize-elements.ts"
            },
            {
              "name": "ResizableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-shadow-resizable",
          "customElement": true,
          "attributes": [
            {
              "name": "ironResizeCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "ironResizeCount",
              "inheritedFrom": {
                "name": "ObserveResizeMixin",
                "module": "test/mixins/resize-elements.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "XLightResizable",
          "members": [
            {
              "kind": "field",
              "name": "ironResizeCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "ironResizeCount",
              "inheritedFrom": {
                "name": "ObserveResizeMixin",
                "module": "test/mixins/resize-elements.ts"
              }
            },
            {
              "kind": "method",
              "name": "_incrementIronResizeCount",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ObserveResizeMixin",
                "module": "test/mixins/resize-elements.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ObserveResizeMixin",
              "module": "test/mixins/resize-elements.ts"
            },
            {
              "name": "ResizableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-light-resizable",
          "customElement": true,
          "attributes": [
            {
              "name": "ironResizeCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "ironResizeCount",
              "inheritedFrom": {
                "name": "ObserveResizeMixin",
                "module": "test/mixins/resize-elements.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "XResizerParentFiltered",
          "declaration": {
            "name": "XResizerParentFiltered",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "x-resizer-parent-filtered",
          "declaration": {
            "name": "XResizerParentFiltered",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "XResizableInShadow",
          "declaration": {
            "name": "XResizableInShadow",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "x-resizable-in-shadow",
          "declaration": {
            "name": "XResizableInShadow",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "TestElement",
          "declaration": {
            "name": "TestElement",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-element",
          "declaration": {
            "name": "TestElement",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "XShadowResizable",
          "declaration": {
            "name": "XShadowResizable",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "x-shadow-resizable",
          "declaration": {
            "name": "XShadowResizable",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "XLightResizable",
          "declaration": {
            "name": "XLightResizable",
            "module": "test/mixins/resize-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "x-light-resizable",
          "declaration": {
            "name": "XLightResizable",
            "module": "test/mixins/resize-elements.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/simple-checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleCheckbox",
          "mixins": [
            {
              "name": "CheckedElementMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SimpleCheckbox",
          "declaration": {
            "name": "SimpleCheckbox",
            "module": "test/mixins/simple-checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "simple-checkbox",
          "declaration": {
            "name": "SimpleCheckbox",
            "module": "test/mixins/simple-checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/simple-validator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SimpleValidator",
          "mixins": [
            {
              "name": "ValidatorMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "simple-validator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SimpleValidator",
          "declaration": {
            "name": "SimpleValidator",
            "module": "test/mixins/simple-validator.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "simple-validator",
          "declaration": {
            "name": "SimpleValidator",
            "module": "test/mixins/simple-validator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/test-elements.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestControl",
          "mixins": [
            {
              "name": "ControlStateMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-control",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestButton",
          "members": [
            {
              "kind": "method",
              "name": "_buttonStateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "ButtonStateMixin",
              "module": "/src/index.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-button",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "NestedFocusable",
          "members": [],
          "mixins": [
            {
              "name": "ControlStateMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "nested-focusable",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "TestLightDom",
          "members": [],
          "mixins": [
            {
              "name": "ButtonStateMixin",
              "module": "/src/index.js"
            },
            {
              "name": "ControlStateMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-light-dom",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestControl",
          "declaration": {
            "name": "TestControl",
            "module": "test/mixins/test-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-control",
          "declaration": {
            "name": "TestControl",
            "module": "test/mixins/test-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "TestButton",
          "declaration": {
            "name": "TestButton",
            "module": "test/mixins/test-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-button",
          "declaration": {
            "name": "TestButton",
            "module": "test/mixins/test-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "NestedFocusable",
          "declaration": {
            "name": "NestedFocusable",
            "module": "test/mixins/test-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "nested-focusable",
          "declaration": {
            "name": "NestedFocusable",
            "module": "test/mixins/test-elements.ts"
          }
        },
        {
          "kind": "js",
          "name": "TestLightDom",
          "declaration": {
            "name": "TestLightDom",
            "module": "test/mixins/test-elements.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-light-dom",
          "declaration": {
            "name": "TestLightDom",
            "module": "test/mixins/test-elements.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/test-fit.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestFit",
          "members": [
            {
              "kind": "field",
              "name": "myProp",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "my-prop"
            }
          ],
          "attributes": [
            {
              "name": "my-prop",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "myProp"
            }
          ],
          "mixins": [
            {
              "name": "FitMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-fit",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestFit",
          "declaration": {
            "name": "TestFit",
            "module": "test/mixins/test-fit.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-fit",
          "declaration": {
            "name": "TestFit",
            "module": "test/mixins/test-fit.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/test-validatable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestValidatable",
          "members": [
            {
              "kind": "method",
              "name": "_onInput",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "mixins": [
            {
              "name": "ValidatableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-validatable",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestValidatable",
          "declaration": {
            "name": "TestValidatable",
            "module": "test/mixins/test-validatable.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-validatable",
          "declaration": {
            "name": "TestValidatable",
            "module": "test/mixins/test-validatable.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/x-resizable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Xresizable",
          "members": [],
          "mixins": [
            {
              "name": "ResizableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-resizable",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Xresizable",
          "declaration": {
            "name": "Xresizable",
            "module": "test/mixins/x-resizable.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "x-resizable",
          "declaration": {
            "name": "Xresizable",
            "module": "test/mixins/x-resizable.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/mixins/x-resizer-parent.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XResizerParent",
          "members": [],
          "mixins": [
            {
              "name": "ResizableMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "x-resizer-parent",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "XResizerParent",
          "declaration": {
            "name": "XResizerParent",
            "module": "test/mixins/x-resizer-parent.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "x-resizer-parent",
          "declaration": {
            "name": "XResizerParent",
            "module": "test/mixins/x-resizer-parent.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/overlay/test-buttons-wrapper.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestButtonsWrapper",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-buttons-wrapper",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestButtonsWrapper",
          "declaration": {
            "name": "TestButtonsWrapper",
            "module": "test/overlay/test-buttons-wrapper.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-buttons-wrapper",
          "declaration": {
            "name": "TestButtonsWrapper",
            "module": "test/overlay/test-buttons-wrapper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/overlay/test-buttons.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestButtons",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-buttons",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestButtons",
          "declaration": {
            "name": "TestButtons",
            "module": "test/overlay/test-buttons.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-buttons",
          "declaration": {
            "name": "TestButtons",
            "module": "test/overlay/test-buttons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/overlay/test-menu-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestMenuButton",
          "members": [
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-menu-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestMenuButton",
          "declaration": {
            "name": "TestMenuButton",
            "module": "test/overlay/test-menu-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-menu-button",
          "declaration": {
            "name": "TestMenuButton",
            "module": "test/overlay/test-menu-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/overlay/test-overlay.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestOverlay",
          "members": [
            {
              "kind": "field",
              "name": "_animated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "animated",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "animated",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "_renderOpened",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderClosed",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "__onTransitionEnd",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "simple-overlay-open-animation-start",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "simple-overlay-close-animation-start",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "animated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "_animated"
            }
          ],
          "mixins": [
            {
              "name": "OverlayMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-overlay",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestOverlay",
          "declaration": {
            "name": "TestOverlay",
            "module": "test/overlay/test-overlay.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-overlay",
          "declaration": {
            "name": "TestOverlay",
            "module": "test/overlay/test-overlay.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/overlay/test-overlay2.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestOverlay2",
          "members": [
            {
              "kind": "field",
              "name": "_focusableNodes",
              "type": {
                "text": "HTMLButtonElement[]"
              }
            }
          ],
          "mixins": [
            {
              "name": "OverlayMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-overlay2",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestOverlay2",
          "declaration": {
            "name": "TestOverlay2",
            "module": "test/overlay/test-overlay2.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-overlay2",
          "declaration": {
            "name": "TestOverlay2",
            "module": "test/overlay/test-overlay2.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/overlay/test-scrollable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestScrollable",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-scrollable",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestScrollable",
          "declaration": {
            "name": "TestScrollable",
            "module": "test/overlay/test-scrollable.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-scrollable",
          "declaration": {
            "name": "TestScrollable",
            "module": "test/overlay/test-scrollable.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/overlay/x-scrollable-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XScrollableElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "scrollable-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "XScrollableElement",
          "declaration": {
            "name": "XScrollableElement",
            "module": "test/overlay/x-scrollable-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "x-scrollable-element",
          "declaration": {
            "name": "XScrollableElement",
            "module": "test/overlay/x-scrollable-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/ranges/test-progress.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TestProgress",
          "mixins": [
            {
              "name": "RangeMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "test-progress",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TestProgress",
          "declaration": {
            "name": "TestProgress",
            "module": "test/ranges/test-progress.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "test-progress",
          "declaration": {
            "name": "TestProgress",
            "module": "test/ranges/test-progress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/scroll/nested-scrollable-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XNestedScrollableElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "nested-scrollable-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "XNestedScrollableElement",
          "declaration": {
            "name": "XNestedScrollableElement",
            "module": "test/scroll/nested-scrollable-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "nested-scrollable-element",
          "declaration": {
            "name": "XNestedScrollableElement",
            "module": "test/scroll/nested-scrollable-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/scroll/scrollable-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "XScrollableElement",
          "members": [
            {
              "kind": "field",
              "name": "itemCount",
              "type": {
                "text": "number"
              },
              "default": "200",
              "attribute": "itemCount"
            },
            {
              "kind": "method",
              "name": "_getItems",
              "return": {
                "type": {
                  "text": "number[]"
                }
              },
              "parameters": [
                {
                  "name": "itemCount",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "itemCount",
              "type": {
                "text": "number"
              },
              "default": "200",
              "fieldName": "itemCount"
            }
          ],
          "mixins": [
            {
              "name": "ScrollTargetMixin",
              "module": "/src/index.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "scrollable-element",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "XScrollableElement",
          "declaration": {
            "name": "XScrollableElement",
            "module": "test/scroll/scrollable-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "scrollable-element",
          "declaration": {
            "name": "XScrollableElement",
            "module": "test/scroll/scrollable-element.ts"
          }
        }
      ]
    }
  ]
}
